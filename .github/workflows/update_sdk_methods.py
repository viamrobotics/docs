from bs4 import BeautifulSoup
from urllib.request import urlopen
from pathlib import Path
from markdownify import markdownify as md
import sys
import os
import subprocess
import urllib.parse
import urllib.error
import re as regex
import argparse


## The full list of SDK languages we scrape. You can use the sdk_languages
## positional parameter to refine this at runtime if desired:
sdks_supported = ["go", "python", "flutter"]

## Arrays of resources to scrape, by type:
##   type = ["array", "of", "resources"]
## You can use the target_resources positional parameter to refine this
## at runtime if desired:
components = ["arm", "base", "board", "camera", "encoder", "gantry", "generic_component", "gripper",
              "input_controller", "motor", "movement_sensor", "power_sensor", "sensor", "servo"]
services = ["base_remote_control", "data_manager", "generic_service", "mlmodel", "motion", "navigation", "slam", "vision"]
app_apis = ["app", "billing", "data", "dataset", "data_sync", "mltraining"]
robot_apis = ["robot"]

## Parse arguments passed to update_sdk_methods.py. You can:
## - Provide the specific sdk languages to run against as a comma-separated list, or
##     omit entirely to run against all sdks_supported.
## - Provide the specific resource(s) to run against as a comma-separated list, or
##     omit entirely to run against all resources, across all types. This option
##     only supports arbitrary resources within the same resource type (i.e. all
##     components, or all services).
## - Use 'verbose' mode to enable DEBUG output.
## - Use 'map' mode to generate a proto map template file only.
parser = argparse.ArgumentParser()
parser.add_argument('sdk_languages', type=str, nargs='?', help="A comma-separated list of the sdks to run against. \
                     Can be one of: go, python, flutter. Omit to run against all sdks.")
parser.add_argument('target_resources', type=str, nargs='?', help="A comma-separated list of the resources to run against. \
                     Must be all within the same resource type, like component or service. Omit to run against all resources.")
parser.add_argument('-o', '--overrides', action='store_true', help="Print out the full expected parameter | return description \
                     override filepath to STDOUT. Use with something like:\n \
                     for filename in `python3 .github/workflows/update_sdk_methods.py -o go motion`; do touch $filename; done")
parser.add_argument('-m', '--map', action='store_true', help="Generate initial mapping CSV file from upstream protos. \
                     In this mode, only the initial mapping file is output, no markdown.")
parser.add_argument('-v', '--verbose', action='store_true', help="Run in verbose mode. Writes a debug file containing \
                     the complete data object from parse() to /tmp/update_sdk_methods_debug.txt. \
                     Also prints high-level status updates to STDOUT. \
                     Deletes previous debug file when run again.")

## Parse provided parameters and arguments, if any:
args = parser.parse_args()
if args.map:
    ## We check for args.map again in both proto_map() and run().
    sdks = sdks_supported
else:
    sdk_list = ''
    resource_list = ''
    only_run_against = ''

    ## Using specific argument names to allow help text to be specific, but checking both
    ## for sdk or resource values, to allow providing either in any position on the CLI.
    if args.sdk_languages is not None:
        first_list = [s.strip() for s in args.sdk_languages.split(",")]
        if True in tuple(x in sdks_supported for x in first_list):
            sdk_list = first_list
        else:
            resource_list = first_list
    if args.target_resources is not None:
        second_list = [s.strip() for s in args.target_resources.split(",")]
        if True in tuple(x in sdks_supported for x in second_list):
            sdk_list = second_list
        else:
            resource_list = second_list

    ## If (one of) the list(s) contains an SDK language name:
    if sdk_list:
        sdks = []
        for sdk_lang in sdk_list:
            if sdk_lang not in sdks_supported:
                print("ERROR: Unsupported SDK language: " + sdk_lang)
                print("Exiting ...")
                exit(1)
            else:
                sdks.append(sdk_lang)
        if not args.overrides:
            print("\nIMPORTANT: You have indicated that you want to run against specific SDKs, instead of all.")
            print("           This will ERASE any existing content for any SDKs which you have not specified.")
            print("           This is suitable for the initial conversion to autogenerated content, but likely")
            print("           not desireable once automation is in full swing. If you do not want this, you should")
            print("           CANCEL this run, and re-run without specifying any SDKs, which will run against all.")
    else:
        sdks = sdks_supported

    ## If (one of) the list(s) does not contain an SDK language name, assume this list is
    ## intended to serve as the resource list, and check each item against its matching
    ## likely resource type. All provided resources must be of the same resource type,
    ## so we can return an error to the operator as soon as any subsequent resource fails
    ## to match to another entry on the first's resource type array (i.e. if first is arm,
    ## we can always safely error and quit if second returns False against same type array: component):
    if resource_list:
        if True in tuple(x in components for x in resource_list) and not False in tuple(x in components for x in resource_list):
            only_run_against = 'components'
            components = resource_list
        elif True in tuple(x in services for x in resource_list) and not False in tuple(x in services for x in resource_list):
            only_run_against = 'services'
            services = resource_list
        elif True in tuple(x in app_apis for x in resource_list) and not False in tuple(x in app_apis for x in resource_list):
            only_run_against = 'app_apis'
            app_apis = resource_list
        elif True in tuple(x in robot_apis for x in resource_list) and not False in tuple(x in robot_apis for x in resource_list):
            only_run_against = 'robot_apis'
            robot_apis = resource_list
        else:
           print("ERROR: Malformed resource list: " + str(resource_list))
           print("       Specified resources must all be within a single resource type, like components or services.")
           print("Exiting ...")
           exit(1)

## If running in verbose mode, print some initial configuration details to the operator:
if args.verbose:
    print('\nVERBOSE MODE: See /tmp/update_sdk_methods_debug.txt for debug output.')
    print('              Note: This file is deleted at the start of each new verbose run.')
    print('              Try, in a separate terminal window:\n')
    print('              DURING RUN: tail -f /tmp/update_sdk_methods_debug.txt')
    print('              AFTER RUN: less /tmp/update_sdk_methods_debug.txt\n')
if sdk_list and args.verbose:
    print('SDKS OVERRIDE: Only running against ' + str(sdks) + '\n')
if resource_list and args.verbose:
    print('RESOURCE OVERRIDE: Only running against ' + str(resource_list) + '\n')
if args.overrides and args.verbose:
    print("ERROR: You cannot use verbose mode with print overrides mode.")
    print("       If you want this script to print the overrides filepaths it needs")
    print("       for param | return description overrides, rerun this script with")
    print("       the -o flag but WITHOUT the -v flag.")
    print("Exiting ...")
    exit(1)

## This script must be run within the 'docs' git repo. Here we check
## to make sure this is the case, and get the root of our git-managed
## repo to use later in parse() and write_markdown():
process_result = subprocess.Popen(['git', 'rev-parse', '--show-toplevel'], \
                     stdout=subprocess.PIPE, \
                     stderr=subprocess.PIPE)
stdout, stderr = process_result.communicate()

if process_result.returncode == 0:
    gitroot = stdout.decode().rstrip()
else:
    print("ERROR: You must run this script within a cloned copy of the 'docs' git repo!")
    print("Exiting ...")
    exit(1)

## Build path to sdk_protos_map.csv file that contains proto-to-methods mapping, used in write_markdown():
proto_map_file = os.path.join(gitroot, '.github/workflows/sdk_protos_map.csv')

## Array mapping language to its root URL:
sdk_url_mapping = {
    "go": "https://pkg.go.dev",
    "python": "https://python.viam.dev",
    "cpp": "https://cpp.viam.dev",
    "typescript": "https://ts.viam.dev",
    "flutter": "https://flutter.viam.dev"
}

## Dictionary of proto API names, with empty methods array, to be filled in for later use by get_proto_apis():
proto_map = {
    "arm": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/component/arm/v1/arm_grpc.pb.go",
        "name": "ArmServiceClient",
        "methods": []
    },
    "base": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/component/base/v1/base_grpc.pb.go",
        "name": "BaseServiceClient",
        "methods": []
    },
    "board": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/component/board/v1/board_grpc.pb.go",
        "name": "BoardServiceClient",
        "methods": []
    },
    "camera": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/component/camera/v1/camera_grpc.pb.go",
        "name": "CameraServiceClient",
        "methods": []
    },
    "encoder": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/component/encoder/v1/encoder_grpc.pb.go",
        "name": "EncoderServiceClient",
        "methods": []
    },
    "gantry": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/component/gantry/v1/gantry_grpc.pb.go",
        "name": "GantryServiceClient",
        "methods": []
    },
    "generic_component": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/component/generic/v1/generic_grpc.pb.go",
        "name": "GenericServiceClient",
        "methods": []
    },
    "gripper": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/component/gripper/v1/gripper_grpc.pb.go",
        "name": "GripperServiceClient",
        "methods": []
    },
    "input_controller": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/component/inputcontroller/v1/input_controller_grpc.pb.go",
        "name": "InputControllerServiceClient",
        "methods": []
    },
    "motor": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/component/motor/v1/motor_grpc.pb.go",
        "name": "MotorServiceClient",
        "methods": []
    },
    "movement_sensor": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/component/movementsensor/v1/movementsensor_grpc.pb.go",
        "name": "MovementSensorServiceClient",
        "methods": []
    },
    "power_sensor": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/component/powersensor/v1/powersensor_grpc.pb.go",
        "name": "PowerSensorServiceClient",
        "methods": []
    },
    "sensor": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/component/sensor/v1/sensor_grpc.pb.go",
        "name": "SensorServiceClient",
        "methods": []
    },
    "servo": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/component/servo/v1/servo_grpc.pb.go",
        "name": "ServoServiceClient",
        "methods": []
    },
    "data_manager": {
        "url": "https://github.com/viamrobotics/api/blob/main/service/datamanager/v1/data_manager_grpc.pb.go",
        "name": "DataManagerServiceClient",
        "methods": []
    },
    "generic_service": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/service/generic/v1/generic_grpc.pb.go",
        "name": "GenericServiceClient",
        "methods": []
    },
    "mlmodel": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/service/mlmodel/v1/mlmodel_grpc.pb.go",
        "name": "MLModelServiceClient",
        "methods": []
    },
    "motion": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/service/motion/v1/motion_grpc.pb.go",
        "name": "MotionServiceClient",
        "methods": []
    },
    "navigation": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/service/navigation/v1/navigation_grpc.pb.go",
        "name": "NavigationServiceClient",
        "methods": []
    },
    "slam": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/service/slam/v1/slam_grpc.pb.go",
        "name": "SLAMServiceClient",
        "methods": []
    },
    "vision": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/service/vision/v1/vision_grpc.pb.go",
        "name": "VisionServiceClient",
        "methods": []
    },
    "app": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/app/v1/app_grpc.pb.go",
        "name": "AppServiceClient",
        "methods": []
    },
    "billing": {
        "url": "https://github.com/viamrobotics/api/blob/main/app/v1/billing_grpc.pb.go",
        "name": "BillingServiceClient",
        "methods": []
    },
    "data": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/app/data/v1/data_grpc.pb.go",
        "name": "DataServiceClient",
        "methods": []
    },
    "dataset": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/app/dataset/v1/dataset_grpc.pb.go",
        "name": "DatasetServiceClient",
        "methods": []
    },
    "data_sync": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/app/datasync/v1/data_sync_grpc.pb.go",
        "name": "DataSyncServiceClient",
        "methods": []
    },
    "robot": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/robot/v1/robot_grpc.pb.go",
        "name": "RobotServiceClient",
        "methods": []
    },
    "mltraining": {
        "url": "https://raw.githubusercontent.com/viamrobotics/api/main/app/mltraining/v1/ml_training_grpc.pb.go",
        "name": "MLTrainingServiceClient",
        "methods": []
    }
}

## Language-specific resource name overrides:
##   "proto_resource_name" : "language-specific_resource_name"
##   "as-it-appears-in-type-array": "as-it-is-used-per-sdk"
## Note: Always remap generic component and service, for all languages,
##       as this must be unique for this script, but is non-unique across sdks.
go_resource_overrides = {
    "generic_component": "generic",
    "input_controller": "input",
    "movement_sensor": "movementsensor",
    "power_sensor": "powersensor",
    "generic_service": "generic",
    "base_remote_control": "baseremotecontrol",
    "data_manager": "datamanager"
}

## Ignore these specific APIs if they error, are deprecated, etc:
## {resource}.{methodname} to exclude a specific method, or
## interface.{interfacename} to exclude an entire Go interface:
go_ignore_apis = [
    'interface.NavStore', # motion service interface
    'interface.LocalRobot', # robot interface
    'interface.RemoteRobot', # robot interface
    'robot.RemoteByName', # robot method
    'robot.ResourceByName', # robot method
    'robot.RemoteNames', # robot method
    #'robot.ResourceNames', # robot method
    'robot.ResourceRPCAPIs', # robot method
    'robot.ProcessManager', # robot method
    'robot.OperationManager', # robot method
    'robot.SessionManager', # robot method
    'robot.PackageManager', # robot method
    'robot.Logger' # robot method
]

## Use these URLs for data types (for params, returns, and errors raised) that are
## built-in to the language or provided by a non-Viam third-party package:
## TODO: Not currently using these in parse(), but could do a simple replace()
##       or could handle in markdownification instead. TBD. Same with other SDK lang link arrays:
go_datatype_links = {
    "context": "https://pkg.go.dev/context",
    "map": "https://go.dev/blog/maps",
    "bool": "https://pkg.go.dev/builtin#bool",
    "int": "https://pkg.go.dev/builtin#int",
    "float64": "https://pkg.go.dev/builtin#float64",
    "image": "https://pkg.go.dev/image#Image",
    "r3.vector": "https://pkg.go.dev/github.com/golang/geo/r3#Vector",
    "string": "https://pkg.go.dev/builtin#string",
    "*geo.Point": "https://pkg.go.dev/github.com/kellydunn/golang-geo#Point",
    "primitive.ObjectID": "https://pkg.go.dev/go.mongodb.org/mongo-driver/bson/primitive#ObjectID",
    "error": "https://pkg.go.dev/builtin#error"
}

## Language-specific resource name overrides:
python_resource_overrides = {
    "generic_component": "generic",
    "input_controller": "input",
    "generic_service": "generic",
    "data": "data_client",
    "app": "app_client",
    "billing": "billing_client",
    "data": "data_client",
    ## Python bundles Dataset and Datasync protos in with Data,
    ## while Flutter does not. HACK:
    "dataset": "data_client",
    "data_sync": "data_client",
    "mltraining": "ml_training_client"
}

## Ignore these specific APIs if they error, are deprecated, etc:
python_ignore_apis = [
    'viam.app.app_client.AppClient.get_rover_rental_robots', # internal use
    'viam.app.app_client.AppClient.get_rover_rental_parts', # internal use
    'viam.app.data_client.DataClient.create_filter', # deprecated
    'viam.app.data_client.DataClient.delete_tabular_data_by_filter', # deprecated
    'viam.components.input.client.ControllerClient.reset_channel', # GUESS ?
    'viam.robot.client.RobotClient.transform_point_cloud', # unimplemented
    'viam.robot.client.RobotClient.get_component', # GUESS ?
    'viam.robot.client.RobotClient.get_service', # GUESS ?
    'viam.components.board.client.BoardClient.write_analog', # Currently borked: https://python.viam.dev/autoapi/viam/components/board/client/index.html#viam.components.board.client.BoardClient.write_analog
    'viam.components.board.client.StreamWithIterator.next', # No content upstream
    'viam.robot.client.ViamChannel.close', # channel-specific close
    'viam.robot.client.SessionsClient.reset'  # session-specific reset
]

## Use these URLs for data types that are not otherwise captured by parse(), such as:
## - Well-known built-in data types that are not scrapeable (like 'int')
## - Viam-specific data types, even if scrapeable, that are part of a multiple-data-type return
##   (like list_organization_members : Tuple[List[viam.proto.app.OrganizationMember], List[viam.proto.app.OrganizationInvite]]
## Data type links defined here will be used instead of scraped links if both exist:
python_datatype_links = {
    ## Built-in data types:
    "str": "https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str",
    "int": "https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex",
    "float": "https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex",
    "bytes": "https://docs.python.org/3/library/stdtypes.html#bytes-objects",
    "bool": "https://docs.python.org/3/library/stdtypes.html#boolean-type-bool",
    "datetime.datetime": "https://docs.python.org/3/library/datetime.html",
    "datetime.timedelta": "https://docs.python.org/3/library/datetime.html#timedelta-objects",
    ## Third-party data types:
    "numpy.typing.NDArray": "https://numpy.org/doc/stable/reference/typing.html#numpy.typing.NDArray",
    ## Viam-specific data types:
    "viam.proto.app.OrganizationMember": "https://python.viam.dev/autoapi/viam/proto/app/index.html#viam.proto.app.OrganizationMember",
    "viam.proto.app.OrganizationInvite": "https://python.viam.dev/autoapi/viam/proto/app/index.html#viam.proto.app.OrganizationInvite",
    "viam.components.arm.KinematicsFileFormat.ValueType": "https://python.viam.dev/autoapi/viam/components/arm/index.html#viam.components.arm.KinematicsFileFormat",
    "viam.media.video.NamedImage": "https://python.viam.dev/autoapi/viam/media/video/index.html#viam.media.video.NamedImage",
    "viam.proto.common.ResponseMetadata": "https://python.viam.dev/autoapi/viam/gen/common/v1/common_pb2/index.html#viam.gen.common.v1.common_pb2.ResponseMetadata",
    "viam.proto.component.encoder.PositionType.ValueType": "https://python.viam.dev/autoapi/viam/gen/component/encoder/v1/encoder_pb2/index.html#viam.gen.component.encoder.v1.encoder_pb2.PositionType",
    "typing_extensions.Self": "https://python.viam.dev/autoapi/viam/robot/client/index.html#viam.robot.client.RobotClient",
    "viam.components.movement_sensor.movement_sensor.MovementSensor.Accuracy": "https://python.viam.dev/autoapi/viam/components/movement_sensor/movement_sensor/index.html#viam.components.movement_sensor.movement_sensor.MovementSensor.Accuracy",
    "viam.services.vision.vision.Vision.Properties": "https://python.viam.dev/autoapi/viam/components/audio_input/audio_input/index.html#viam.components.audio_input.audio_input.AudioInput.Properties"
}

## Inject these URLs, relative to 'docs', into param/return/raises descriptions that contain exact matching key text.
## write_markdown() uses override_description_links via link_description() when it goes to write out descriptions.
## Currently only used for method descriptions, but see commented-out code for usage as optional consideration.
## NOTE: I am assuming we want to link matching text across all SDKs and methods. If not, this array
## will need additional field(s): ( method | sdk ) to narrow match.
## NOTE 2: I omitted links to the SDKs (like for 'datetime', and 'dataclass' since these can be
## separately handled uniformly (perhaps with the {sdk}_datatype_links array for example).
## EXAMPLES: The first two items in this dict correspond to these docs examples:
## EXAMPLE 1: https://docs.viam.com/services/frame-system/#transformpose
## EXAMPLE 2: https://docs.viam.com/services/motion/#moveonmap
override_description_links = {
    "additional transforms": "/services/frame-system/#additional-transforms",
    "SLAM service": "/services/slam/",
    "frame": "/services/frame-system/",
    "Viam app": "https://app.viam.com/",
    "organization settings page": "/cloud/organizations/",
    "image tags": "/fleet/dataset/#image-tags",
    "API key": "/fleet/cli/#authenticate",
    "board model": "/components/board/#configuration"
}

## Language-specific resource name overrides:
flutter_resource_overrides = {
    "generic_component": "Generic",
    "movement_sensor": "MovementSensor",
    "power_sensor": "PowerSensor",
    "vision": "VisionClient",
    "robot": "RobotClient"
}

## Ignore these specific APIs if they error, are deprecated, etc:
flutter_ignore_apis = [
    'getRoverRentalRobots' # internal use
]

## Use these URLs for data types that are built-in to the language:
flutter_datatype_links = {}

## Map sdk language to specific code fence formatting syntax for that language:
code_fence_fmt = {
    'python': 'python',
    'go': 'go',
    'flutter': 'dart'
}

## Check to see if we have a locally-staged version of any of the supported SDK docs sites.
## If any are detected here, they will be used for all content in parse(), and the live
## version for that SDK docs site will not be scraped at all! First, set empty staging URLs
## to allow us to later action on whether they are empty or not:
python_staging_url = ''
go_staging_url = ''
flutter_staging_url = ''

## Check for GO SDK docs staging on local workstation:
go_process_pid = subprocess.run(["ps -ef | grep pkgsite | grep -v grep | awk {'print $2'}"], shell=True, text=True, capture_output=True).stdout.rstrip()

## If we found a staged local instance of the GO SDK docs, determine which port it is using, and build the staging URL to scrape against:
if go_process_pid != '':
    go_process_port = subprocess.run(["lsof -Pp " + go_process_pid + " | grep LISTEN | awk {'print $9'} | sed 's%.*:%%g'"], shell=True, text = True, capture_output=True).stdout.rstrip()
    go_staging_url = 'http://localhost:' + go_process_port
    if args.verbose:
        print('DEBUG: Detected local staged Go SDK docs URL: ' + go_staging_url + '/go.viam.com/rdk')
        print('       Using this URL for all Go content (ignoring live version).')

## Check for Python and Flutter SDK docs staging on local workstation.
## Both use http.server with a user-selected port. This command fetches all possible matches:
http_server_process_pids = subprocess.run(["ps -ef | grep http.server | grep -v grep | awk '{print $2}'"], shell=True, text=True, capture_output=True).stdout.rstrip().split('\n')

## For each http.server processes detected, make educated guesses about which is which, determine the port used, and build the staging URL to scrape against:
for pid in http_server_process_pids:
    http_server_pwd_result = subprocess.run(["lsof -Pp " + pid + " | grep cwd | awk {'print $9'}"], shell=True, text = True, capture_output=True).stdout.rstrip()

    ## Quality guess: Python build process always builds to this directory; safe to assume:
    if 'docs/_build/html' in http_server_pwd_result:
        python_process_port = subprocess.run(["lsof -Pp " + pid + " | grep LISTEN | awk {'print $9'} | sed 's%.*:%%g'"], shell=True, text = True, capture_output=True).stdout.rstrip()
        python_staging_url = 'http://localhost:' + python_process_port
        if args.verbose:
            print('DEBUG: Detected local staged Python SDK docs URL: ' + python_staging_url)
            print('       Using this URL for all Python content (ignoring live version).')

    ## Mediocre guess: Flutter build process likely to have string 'flutter' in cwd, either 'viam-flutter-sdk' as cloned directly, or 'flutter' as renamed by operator.
    ## TODO: If operators run into instances where this script misses a valid Flutter staging URL because the path to that staged HTML artifacts dir has been
    ## renamed in a fashion that does not include the string 'flutter', then change this to just always pick up any instances of http.server that aren't already matched to
    ## Go, above. This would mean that operators cannot run an unrelated http.server instance on this workstation, which they currently can do with present config.
    if 'flutter' in http_server_pwd_result:
        flutter_process_port = subprocess.run(["lsof -Pp " + pid + " | grep LISTEN | awk {'print $9'} | sed 's%.*:%%g'"], shell=True, text = True, capture_output=True).stdout.rstrip()
        flutter_staging_url = 'http://localhost:' + flutter_process_port + '/doc/api'
        if args.verbose:
            print('DEBUG: Detected local staged Flutter SDK docs URL: ' + flutter_staging_url)
            print('       Using this URL for all Flutter content (ignoring live version).')

## Fetch canonical Proto method names.
## Required by Flutter parsing, and for generating the initial mapping file if -m was passed:
def get_proto_apis():
    for api in proto_map.keys():
        api_url = proto_map[api]["url"]
        api_name = proto_map[api]["name"]

        api_page = urlopen(api_url)
        api_html = api_page.read().decode("utf-8")

        ## Protos are presented in plaintext, so we must match by expected raw text:
        proto_regex = 'type ' + regex.escape(api_name) + r'[^{]*\{([^}]+)\}'
        search = regex.search(proto_regex, api_html)
        match_output = search.group()
        split = match_output.splitlines()

        for line in split:
            line = line.strip()
            if line[0].isupper():
                separator = "("
                line = line.split(separator, 1)[0]
                ## Append to proto_map for use later:
                proto_map[api]["methods"].append(line)

    ## Only generate proto mapping template file if 'map' was passed as argument:
    if args.map:

        ## Writing template file with extra '.template' at the end to avoid accidentally clobbering
        ## the prod file if we've already populated it. When ready, change the filename to exactly
        ## sdk_protos_map.csv for this script to use it for proto mapping:
        proto_map_file_template = os.path.join(gitroot, '.github/workflows/sdk_protos_map.csv.template')
        output_file = open('%s' % proto_map_file_template, "w")

        output_file.write('## RESOURCE, PROTO, PYTHON METHOD, GO METHOD, FLUTTER METHOD\n')

        for api in proto_map.keys():
            output_file.write('\n## ' + api.title() + '\n')
            for proto in proto_map[api]['methods']:

                output_file.write(api + ',' + proto + ',\n')

    return proto_map

## Fetch URL content via BS4, used in parse():
def make_soup(url):
   try:
       page = urlopen(url)
       html = page.read().decode("utf-8")
       return BeautifulSoup(html, "html.parser")
   except urllib.error.HTTPError as err:
       print(f'An HTTPError was thrown: {err.code} {err.reason} for URL: {url}')

def shorten_data_type(t):
    if '.' in t:
        return '.'.join(t.split('.')[-2:])
    else:
        return t

## Link any matching data types to their reference links, based on {sdk}_datatype_links[] array,
## used in parse() for both param and return data types. Handles data types syntax that includes
## multiple data types (and therefore requires multiple data type links), such as
## ListOrganizationMembers: Tuple[List[viam.proto.app.OrganizationMember], List[viam.proto.app.OrganizationInvite]
## DESIGN DECISION: Ignore well-known, usually leading (containing) data types like List, Tuple, Dict.
## NOTE: Only used in PySDK parsing, for now (but should work for all with minor tweak to support per-language links array):
def link_data_types(sdk, data_type_string):

    linked_data_type_string = ""

    ## If the passed data_type_string matches exactly to a data type defined in python_datatype_links, use that:
    if data_type_string in python_datatype_links.keys():
        shorter_data_type = shorten_data_type(data_type_string)
        linked_data_type_string = '[' + shorter_data_type + '](' + python_datatype_links[data_type_string] + ')'
    else:

        ## Assemble all encountered data types that match to python_datatype_links keys into array.
        ## This match is a little too greedy, and will match, say, 'int' to 'JointPositions'. To counter
        ## this, we additionally check for leading and trailing alphanumeric characters further in:
        matching_data_types = list(key for key in python_datatype_links if key in data_type_string)

        if len(matching_data_types) > 0:

            ## Ugly hack to allow us to append within the for loop below, sorry:
            linked_data_type_string = data_type_string

            for data_type_found in matching_data_types:

                ## Discard string matches that are substrings of other data type strings:
                if not regex.search(r'[A-Za-z0-9]' + data_type_found, data_type_string) and not regex.search(data_type_found + r'[A-Za-z0-9]', data_type_string):

                    shorter_data_type = shorten_data_type(data_type_found)
                    data_type_linked = '[' + shorter_data_type + '](' + python_datatype_links[data_type_found] + ')'
                    linked_data_type_string = regex.sub(data_type_found, data_type_linked, linked_data_type_string)
                else:
                    ## If we get here, this data_type is actually a substring of another data type. Take no action:
                    pass

    ## If we didn't find any matching links, return an empty string so we can know to look elsewhere,
    ## otherwise return linked data type string:
    if linked_data_type_string == data_type_string:
        return ""
    else:
        return linked_data_type_string


## Link matching text, used in write_markdown():
## NOTE: Currently does not support formatting for link titles
## (EXAMPLE: bolded DATA tab here: https://docs.viam.com/appendix/apis/data-client/#binarydatabyfilter)
def link_description(format_type, full_description, link_text, link_url):

    ## Supports 'md' link styling or 'html' link styling.
    ## The latter in case you want to link raw method usage:
    if format_type == 'md':
        new_linked_text = '[' + link_text + '](' + link_url + ')'
        linked_description = regex.sub(link_text, new_linked_text, full_description)
    elif format_type == 'html':
        new_linked_text = '<a href="' + link_url + '">' + link_text + '</a>'
        linked_description = regex.sub(link_text, new_linked_text, full_description)

    return linked_description

## Fetch SDK documentation for each language in sdks array, by language, by type, by resource, by method.
def parse(type, names):

## TODO:
## - Unify returned method object form. Currently returning raw method usage for Go, and by-param, by-return (and by-raise)
##   breakdown for each method for Python and Flutter. Let's chat about which is useful, and which I should throw away.
##   Raw usage is I think how check_python_methods.py currently does it. Happy to convert Flutter and Py to dump raw usage,
##   if you don't need the per-param,per-return,per-raise stuff.

    ## This parent dictionary will contain all dictionaries:
    ## all_methods[sdk][type][resource]
    all_methods = {}

    ## Iterate through each sdk (like 'python') in sdks array:
    for sdk in sdks:

        ## Determine SDK URL based on resource type:
        sdk_url = sdk_url_mapping[sdk]
        scrape_url = sdk_url

        ## Build empty dict to house methods, and update scrape_url
        ## with staging link if we detected one earlier:
        if sdk == "go":
            go_methods = {}
            go_methods[type] = {}
            if go_staging_url != '':
                scrape_url = go_staging_url
        elif sdk == "python":
            python_methods = {}
            python_methods[type] = {}
            if python_staging_url != '':
                scrape_url = python_staging_url
        elif sdk == "flutter":
            flutter_methods = {}
            flutter_methods[type] = {}
            if flutter_staging_url != '':
                scrape_url = flutter_staging_url
        else:
            print("unsupported language!")

        ## Iterate through each resource (like 'arm') in type (like 'components') array:
        for resource in names:

            ## Determine URL form for Go depending on type (like 'component'):
            if sdk == "go":
                if type in ("component", "service") and resource in go_resource_overrides:
                    url = f"{scrape_url}/go.viam.com/rdk/{type}s/{go_resource_overrides[resource]}"
                elif type in ("component", "service"):
                    url = f"{scrape_url}/go.viam.com/rdk/{type}s/{resource}"
                elif type == "robot" and resource in go_resource_overrides:
                    url = f"{scrape_url}/go.viam.com/rdk/{type}/{go_resource_overrides[resource]}"
                elif type == "robot":
                    url = f"{scrape_url}/go.viam.com/rdk/{type}"
                elif type == "app":
                    pass
                go_methods[type][resource] = {}

            ## Determine URL form for Python depending on type (like 'component'):
            elif sdk == "python":
                if type in ("component", "service") and resource in python_resource_overrides:
                    url = f"{scrape_url}/autoapi/viam/{type}s/{python_resource_overrides[resource]}/client/index.html"
                elif type in ("component", "service"):
                    url = f"{scrape_url}/autoapi/viam/{type}s/{resource}/client/index.html"
                elif type == "app" and resource in python_resource_overrides:
                    url = f"{scrape_url}/autoapi/viam/{type}/{python_resource_overrides[resource]}/index.html"
                elif type == "app":
                    url = f"{scrape_url}/autoapi/viam/{type}/{resource}/index.html"
                else: # robot
                    url = f"{scrape_url}/autoapi/viam/{type}/client/index.html"
                python_methods[type][resource] = {}

            ## Determine URL form for Flutter depending on type (like 'component').
            ## TEMP: Manually exclude Base Remote Control Service (Go only):
            ## TODO: Handle resources with 0 implemented methods for this SDK better.
            elif sdk == "flutter" and resource != 'base_remote_control' and resource != 'encoder' and resource != 'input_controller' \
                and resource != 'data_manager' and resource != 'generic_service' and resource !='mlmodel' and resource !='motion' \
                and resource !='navigation' and resource !='slam' and type !='app':

                if resource in flutter_resource_overrides:
                    url = f"{scrape_url}/viam_sdk/{flutter_resource_overrides[resource]}-class.html"
                else:
                    url = f"{scrape_url}/viam_sdk/{resource.capitalize()}-class.html"
                flutter_methods[type][resource] = {}
            ## If an invalid language was provided:
            else:
                pass

            ## Scrape each parent method tag and all contained child tags for Go by resource:
            ## Skip Go: App (Go has no App client) and the generic component and service, which
            ## require explicit in-script workaround (DoCommand neither inherited (from resource.Resource)
            ## nor explicitly defined in-interface (not in Go docs, only in un-doc'd code):
            if sdk == "go" and type != "app" and resource != "generic_component" and resource != "generic_service":

                soup = make_soup(url)

                ## Get a raw dump of all go methods by interface for each resource:
                go_methods_raw = soup.find_all(
                    lambda tag: tag.name == 'div'
                    and tag.get('class') == ['Documentation-declaration']
                    and tag.pre.text.startswith('type')
                    and "interface {" in tag.pre.text)

                # some resources have more than one interface:
                for resource_interface in go_methods_raw:

                    ## Determine the interface name, which we need for the method_link:
                    interface_name = resource_interface.find('pre').text.splitlines()[0].removeprefix('type ').removesuffix(' interface {')

                    ## Exclude unwanted Go interfaces:
                    check_interface_name = 'interface.' + interface_name
                    if not check_interface_name in go_ignore_apis:

                        ## Loop through each method found for this interface:
                        for tag in resource_interface.find_all('span', attrs={"data-kind" : "method"}):

                            ## Create new empty dictionary for this specific method, to be appended to ongoing go_methods dictionary,
                            ## in form: go_methods[type][resource][method_name] = this_method_dict
                            this_method_dict = {}

                            tag_id = tag.get('id')
                            method_name = tag.get('id').split('.')[1]

                            ## Exclude unwanted Go methods:
                            check_method_name = resource + '.' + method_name
                            if not check_method_name in go_ignore_apis:

                                ## Look up method_name in proto_map file, and return matching proto:
                                with open(proto_map_file, 'r') as f:
                                    for row in f:
                                        if not row.startswith('#') \
                                        and row.startswith(resource + ',') \
                                        and row.split(',')[4] == method_name:
                                            this_method_dict["proto"] = row.split(',')[1]

                                ## Extract the raw text from resource_interface matching method_name.
                                ## Split by method span, throwing out remainder of span tag, catching cases where
                                ## id is first attr or data-kind is first attr, and slicing to omit the first match,
                                ## which is the opening of the method span tag, not needed:
                                this_method_raw1 = regex.split(r'id="' + tag_id + '"', str(resource_interface))[1].removeprefix('>').removeprefix(' data-kind="method">').lstrip()

                                ## Then, omit all text that begins a new method span, and additionally remove trailing
                                ## element closers for earlier tags we spliced into (pre and span):
                                this_method_raw2 = regex.split(r'<span .*data-kind="method".*>', this_method_raw1)[0].removesuffix('}</pre>\n</div>').removesuffix('</span>').rstrip()

                                method_description = ""

                                ## Get method description, if any comment spans are found:
                                if tag.find('span', class_='comment'):

                                    ## Iterate through all comment spans, splitting by opening comment tag, and
                                    ## omitting the first string, which is either the opening comment tag itself,
                                    ## or the usage of this method, if the comment is appended to the end of usage line:
                                    for comment in regex.split(r'<span class="comment">', this_method_raw2)[1:]:

                                        comment_raw = regex.split(r'</span>.*', comment.removeprefix('//'))[0].lstrip()
                                        method_description = method_description + comment_raw

                                ## Write comment field as appended comments if found, or empty string if none.
                                this_method_dict["description"] = method_description

                                ## Get full method usage string, by omitting all comment spans:
                                method_usage_raw = regex.sub(r'<span class="comment">.*</span>', '', this_method_raw2)
                                method_usage_raw2 = regex.sub(r'</span>', '', method_usage_raw).replace("\t", "  ").lstrip().rstrip()
                                ## Some Go params use versioned links, some omit the version (to use latest).
                                ## Standardize on using latest for all cases. This handles parameters and returns:
                                this_method_dict["usage"] = regex.sub(r'/rdk@v[0-9\.]*/', '/rdk/', method_usage_raw2, flags=regex.DOTALL)

                                ## Not possible to link to the specific functions, so we link to the parent resource instead.
                                ## If we are scraping from a local staging instance, replace host and port with upstream link target URL:
                                if go_staging_url != '':
                                    this_method_dict["method_link"] = str(url + '#' + interface_name).replace(go_staging_url, 'https://pkg.go.dev')
                                else:
                                    this_method_dict["method_link"] = url + '#' + interface_name

                                ## Check for code sample for this method.
                                go_code_samples_raw = soup.find_all(
                                    lambda code_sample_tag: code_sample_tag.name == 'p'
                                    and code_sample_tag.text.startswith(method_name)
                                    and code_sample_tag.text.endswith(method_name + ' example:\n'))

                                ## Determine if a code sample is provided for this method:
                                if len(go_code_samples_raw) == 1:

                                    ## Fetch code sample raw text, preserving newlines but stripping all formatting.
                                    ## This string should be suitable for feeding into any python formatter to get proper form:
                                    this_method_dict["code_sample"] = go_code_samples_raw[0].find_next('pre').text.replace("\t", "  ")

                                elif len(go_code_samples_raw) > 1:

                                    ## In case we want to support multiple code samples per method down the line,
                                    ## this is where to process (and: update write_markdown() accordingly to enable looping
                                    ## through possible code sample data objects). For now we just continue to fetch just the
                                    ## first-discovered (i.e., at index [0]):
                                    this_method_dict["code_sample"] = go_code_samples_raw[0].find_next('pre').text.replace("\t", "  ")

                                ## We have finished collecting all data for this method. Write the this_method_dict dictionary
                                ## in its entirety to the go_methods dictionary by type (like 'component'), by resource (like 'arm'),
                                ## using the method_name as key:
                                go_methods[type][resource][method_name] = this_method_dict

                        ## If this Go interface inherits from another interface, also fetch data for those inherited methods:
                        if '\tresource.' in resource_interface.text:

                            resource_url = f"{scrape_url}/go.viam.com/rdk/resource"
                            resource_soup = make_soup(resource_url)

                            ## If the resource being considered inherits from resource.Resource (currently all components and services do,
                            ## and no app or robot interfaces do), then add the three inherited methods manually: Reconfigure(), DoCommand(), Close()
                            if '\tresource.Resource' in resource_interface.text:
                                go_methods[type][resource]['Reconfigure'] = {'proto': 'Reconfigure', \
                                    'description': 'Reconfigure must reconfigure the resource atomically and in place. If this cannot be guaranteed, then usage of AlwaysRebuild or TriviallyReconfigurable is permissible.', \
                                    'usage': 'Reconfigure(ctx <a href="/context">context</a>.<a href="/context#Context">Context</a>, deps <a href="#Dependencies">Dependencies</a>, conf <a href="#Config">Config</a>) <a href="/builtin#error">error</a>', \
                                    'method_link': 'https://pkg.go.dev/go.viam.com/rdk/resource#Resource'}
                                code_sample = resource_soup.find_all(lambda code_sample_tag: code_sample_tag.name == 'p' and "Reconfigure example:" in code_sample_tag.text)
                                if code_sample:
                                    go_methods[type][resource]['Reconfigure']['code_sample'] = code_sample[0].find_next('pre').text.replace("\t", "  ")
                                go_methods[type][resource]['DoCommand'] = {'proto': 'DoCommand', \
                                    'description': 'DoCommand sends/receives arbitrary data.', \
                                    'usage': 'DoCommand(ctx <a href="/context">context</a>.<a href="/context#Context">Context</a>, cmd map[<a href="/builtin#string">string</a>]interface{}) (map[<a href="/builtin#string">string</a>]interface{}, <a href="/builtin#error">error</a>)', \
                                    'method_link': 'https://pkg.go.dev/go.viam.com/rdk/resource#Resource'}
                                code_sample = resource_soup.find_all(lambda code_sample_tag: code_sample_tag.name == 'p' and "DoCommand example:" in code_sample_tag.text)
                                if code_sample:
                                    if type == "component":
                                        go_methods[type][resource]['DoCommand']['code_sample'] = 'my' + resource.title().replace("_", "")+ ', err := ' + resource + '.FromRobot(machine, "my_' + resource.title().replace("_", "") + '")\n\ncommand := map[string]interface{}{"cmd": "test", "data1": 500}\nresult, err := my' + resource.title().replace("_", "") + '.DoCommand(context.Background(), command)\n'
                                        if resource == "generic_component":
                                            go_methods[type][resource]['DoCommand']['code_sample'] = 'myGenericComponent, err := generic.FromRobot(machine, "my_' + resource + '")\n\ncommand := map[string]interface{}{"cmd": "test", "data1": 500}\nresult, err := myGenericComponent.DoCommand(context.Background(), command)\n'
                                    else:
                                        go_methods[type][resource]['DoCommand']['code_sample'] = 'my' + resource.title().replace("_", "")+ 'Svc, err := ' + resource + '.FromRobot(machine, "my_' + resource + '_svc")\n\ncommand := map[string]interface{}{"cmd": "test", "data1": 500}\nresult, err := my' + resource.title().replace("_", "") + 'Svc.DoCommand(context.Background(), command)\n'
                                        if resource == "slam":
                                            go_methods[type][resource]['DoCommand']['code_sample'] = 'mySLAMService, err := slam.FromRobot(machine, "my_slam_svc")\n\ncommand := map[string]interface{}{"cmd": "test", "data1": 500}\nresult, err := mySLAMService.DoCommand(context.Background(), command)\n'

                                go_methods[type][resource]['Close'] = {'proto': 'Close', \
                                    'description': 'Close must safely shut down the resource and prevent further use. Close must be idempotent. Later reconfiguration may allow a resource to be "open" again.', \
                                    'usage': 'Close(ctx <a href="/context">context</a>.<a href="/context#Context">Context</a>) <a href="/builtin#error">error</a>', \
                                    'method_link': 'https://pkg.go.dev/go.viam.com/rdk/resource#Resource'}
                                code_sample = resource_soup.find_all(lambda code_sample_tag: code_sample_tag.name == 'p' and "Close example:" in code_sample_tag.text)
                                if code_sample:
                                    if type == "component":
                                        go_methods[type][resource]['Close']['code_sample'] = 'my' + resource.title().replace("_", "") + ', err := ' + go_resource_overrides.get(resource, resource) + '.FromRobot(machine, "my_' + resource + '")\n\nerr = my' + resource.title().replace("_", "") + '.Close(context.Background())\n'
                                    else:
                                        if resource == "base_remote_control":
                                            go_methods[type][resource]['Close']['code_sample'] = 'baseRCService, err := baseremotecontrol.FromRobot(machine, "my_baseRCService_svc")\n\nerr := baseRCService.Close(context.Background())\n'
                                        elif resource == "data_manager":
                                            go_methods[type][resource]['Close']['code_sample'] = 'data, err := datamanager.FromRobot(machine, "my_data_manager")\n\nerr := data.Close(context.Background())\n'
                                        elif resource == "navigation":
                                            go_methods[type][resource]['Close']['code_sample'] = 'my_nav, err := navigation.FromRobot(machine, "my_nav_svc")\n\nerr := my_nav.Close(context.Background())\n'
                                        elif resource == "mlmodel":
                                            go_methods[type][resource]['Close']['code_sample'] = 'my_mlmodel, err := mlmodel.FromRobot(machine, "my_ml_model")\n\nerr := my_mlmodel.Close(context.Background())\n'
                                        else:
                                            go_methods[type][resource]['Close']['code_sample'] = 'my' + resource.title().replace("_", "") + 'Svc, err := ' + resource + '.FromRobot(machine, "my_' + resource + '_svc")\n\nerr = my' + resource.title().replace("_", "") + 'Svc.Close(context.Background())\n'

                            ## Similarly, if the resource being considered inherits from resource.Actuator (Servo, for example),
                            ## then add the two inherited methods manually: IsMoving() and Stop():
                            if '\tresource.Actuator' in resource_interface.text:
                                go_methods[type][resource]['IsMoving'] = {'proto': 'IsMoving', \
                                    'description': 'IsMoving returns whether the resource is moving or not', \
                                    'usage': 'IsMoving(ctx <a href="/context">context</a>.<a href="/context#Context">Context</a>) (<a href="/builtin#bool">bool</a>, <a href="/builtin#error">error</a>)', \
                                    'method_link': 'https://pkg.go.dev/go.viam.com/rdk/resource#Actuator'}
                                code_sample = resource_soup.find_all(lambda code_sample_tag: code_sample_tag.name == 'p' and "IsMoving example:" in code_sample_tag.text)
                                if code_sample:
                                    go_methods[type][resource]['IsMoving']['code_sample'] = code_sample[0].find_next('pre').text.replace("\t", "  ")
                                go_methods[type][resource]['Stop'] = {'proto': 'Stop', \
                                    'description': 'Stop stops all movement for the resource', \
                                    'usage': 'Stop(ctx <a href="/context">context</a>.<a href="/context#Context">Context</a>, extra map[<a href="/builtin#string">string</a>]interface{}) <a href="/builtin#error">error</a>', \
                                    'method_link': 'https://pkg.go.dev/go.viam.com/rdk/resource#Actuator'}
                                code_sample = resource_soup.find_all(lambda code_sample_tag: code_sample_tag.name == 'p' and "Stop example:" in code_sample_tag.text)
                                if code_sample:
                                    go_methods[type][resource]['Stop']['code_sample'] = code_sample[0].find_next('pre').text.replace("\t", "  ")

                            ## Similarly, if the resource being considered inherits from resource.Shaped (Base, for example),
                            ## then add the one inherited method manually: Geometries():
                            if '\tresource.Shaped' in resource_interface.text:
                                go_methods[type][resource]['Geometries'] = {'proto': 'GetGeometries', \
                                    'description': 'Geometries returns the list of geometries associated with the resource, in any order. The poses of the geometries reflect their current location relative to the frame of the resource.', \
                                    'usage': 'Geometries(ctx <a href="/context">context</a>.<a href="/context#Context">Context</a>, extra map[<a href="/builtin#string">string</a>]interface{}) ([]<a href="/go.viam.com/rdk/spatialmath">spatialmath</a>.<a href="/go.viam.com/rdk/spatialmath#Geometry">Geometry</a>, <a href="/builtin#error">error</a>)', \
                                    'method_link': 'https://pkg.go.dev/go.viam.com/rdk/resource#Shaped'}
                                code_sample = resource_soup.find_all(lambda code_sample_tag: code_sample_tag.name == 'p' and "Geometries example:" in code_sample_tag.text)
                                if code_sample:
                                    go_methods[type][resource]['Geometries']['code_sample'] = code_sample[0].find_next('pre').text.replace("\t", "  ").replace('myArm', 'my{}'.format(resource.title().replace('_', ''))).replace('my_arm', 'my_{}'.format(resource)).replace('arm', resource)

                            ## Similarly, if the resource being considered inherits from resource.Sensor (Movement Sensor, for example),
                            ## then add the one inherited method manually: Readings():
                            if '\tresource.Sensor' in resource_interface.text:
                                go_methods[type][resource]['Readings'] = {'proto': 'GetReadings', \
                                    'description': 'Readings return data specific to the type of sensor and can be of any type.', \
                                    'usage': 'Readings(ctx <a href="/context">context</a>.<a href="/context#Context">Context</a>, extra map[<a href="/builtin#string">string</a>]interface{}) (map[<a href="/builtin#string">string</a>]interface{}, <a href="/builtin#error">error</a>)', \
                                    'method_link': 'https://pkg.go.dev/go.viam.com/rdk/resource#Sensor'}
                                code_sample = resource_soup.find_all(lambda code_sample_tag: code_sample_tag.name == 'p' and "Readings example:" in code_sample_tag.text)
                                if code_sample:
                                    go_methods[type][resource]['Readings']['code_sample'] = code_sample[0].find_next('pre').text.replace("\t", "  ")

                ## For SLAM service only, additionally fetch data for two helper methods defined outside of the resource's interface:
                if resource == 'slam':

                    ## Fetch PointCloudMapFull:
                    pointcloudmapfull_method_raw = soup.find_all(
                        lambda tag: tag.name == 'div'
                        and tag.get('class') == ['Documentation-declaration']
                        and "PointCloudMapFull" in tag.pre.text)

                    go_methods[type][resource]['PointCloudMapFull'] = {}
                    go_methods[type][resource]['PointCloudMapFull']['proto'] = 'PointCloudMapFull'
                    go_methods[type][resource]['PointCloudMapFull']['description'] = pointcloudmapfull_method_raw[0].pre.find_next('p').text
                    go_methods[type][resource]['PointCloudMapFull']['usage'] = str(pointcloudmapfull_method_raw[0].pre).removeprefix('<pre>func ').removesuffix('</pre>')
                    go_methods[type][resource]['PointCloudMapFull']['method_link'] = 'https://pkg.go.dev/go.viam.com/rdk/services/slam#PointCloudMapFull'

                    ## Fetch InternalStateFull:
                    internalstatefull_method_raw = soup.find_all(
                        lambda tag: tag.name == 'div'
                        and tag.get('class') == ['Documentation-declaration']
                        and "InternalStateFull" in tag.pre.text)

                    go_methods[type][resource]['InternalStateFull'] = {}
                    go_methods[type][resource]['InternalStateFull']['proto'] = 'InternalStateFull'
                    go_methods[type][resource]['InternalStateFull']['description'] = internalstatefull_method_raw[0].pre.find_next('p').text
                    go_methods[type][resource]['InternalStateFull']['usage'] = str(internalstatefull_method_raw[0].pre).removeprefix('<pre>func ').removesuffix('</pre>')
                    go_methods[type][resource]['InternalStateFull']['method_link'] = 'https://pkg.go.dev/go.viam.com/rdk/services/slam#InternalStateFull'


                go_methods[type][resource]['DoCommand'] = {}
                go_methods[type][resource]['DoCommand'] = {'proto': 'DoCommand', \
                                    'description': 'DoCommand sends/receives arbitrary data.', \
                                    'usage': 'DoCommand(ctx <a href="/context">context</a>.<a href="/context#Context">Context</a>, cmd map[<a href="/builtin#string">string</a>]interface{}) (map[<a href="/builtin#string">string</a>]interface{}, <a href="/builtin#error">error</a>)', \
                                    'method_link': 'https://pkg.go.dev/go.viam.com/rdk/resource#Resource', \
                                    'code_sample': 'my' + resource.title().replace("_", "") + ', err := ' + resource + '.FromRobot(machine, "my_' + resource + '")\n\ncommand := map[string]interface{}{"cmd": "test", "data1": 500}\nresult, err := my' + resource.title().replace("_", "") + '.DoCommand(context.Background(), command)\n'}

                ## We have finished looping through all scraped Go methods. Write the go_methods dictionary
                ## in its entirety to the all_methods dictionary using "go" as the key:
                all_methods["go"] = go_methods

            ## Assemble workaround data object for DoCommand for Go generic component and service.
            ## Using code sample and method_link from resource.Resource, because these cannot be found
            ## in Go docs for these resources:
            elif sdk == "go" and (resource == "generic_component" or resource == "generic_service"):

                go_methods[type][resource]['DoCommand'] = {}
                go_methods[type][resource]['DoCommand'] = {'proto': 'DoCommand', \
                                    'description': 'DoCommand sends/receives arbitrary data.', \
                                    'usage': 'DoCommand(ctx <a href="/context">context</a>.<a href="/context#Context">Context</a>, cmd map[<a href="/builtin#string">string</a>]interface{}) (map[<a href="/builtin#string">string</a>]interface{}, <a href="/builtin#error">error</a>)', \
                                    'method_link': 'https://pkg.go.dev/go.viam.com/rdk/resource#Resource', \
                                    'code_sample': 'my' + resource.replace("_", "").title() + ', err := ' + resource + '.FromRobot(machine, "my_' + resource + '")\n\ncommand := map[string]interface{}{"cmd": "test", "data1": 500}\nresult, err := my' + resource.replace("_", "").title() + '.DoCommand(context.Background(), command)\n'}
                if resource == "generic_service":
                    go_methods[type][resource]['DoCommand']['code_sample'] = 'myGenericService, err := generic.FromRobot(machine, "my_generic_service")\n\ncommand := map[string]interface{}{"cmd": "test", "data1": 500}\nresult, err := myGenericService.DoCommand(context.Background(), command)\n'

                all_methods["go"] = go_methods

            elif sdk == "go" and type == "app":
               ##Go SDK has no APP API!
               pass

            ## Scrape each parent method tag and all contained child tags for Python by resource.
            ## TEMP: Manually exclude Base Remote Control Service (Go only) and Data Manager Service (Go + Flutter only).
            ## TODO: Handle resources with 0 implemented methods for this SDK better.
            elif sdk == "python" and resource != 'base_remote_control' and resource != 'data_manager':
                soup = make_soup(url)
                python_methods_raw = soup.find_all("dl", class_="py method")

                ## Loop through scraped tags and select salient data:
                for tag in python_methods_raw:

                    ## Create new empty dictionary for this specific method, to be appended to ongoing python_methods dictionary,
                    ## in form: python_methods[type][resource][method_name] = this_method_dict
                    this_method_dict = {}

                    id = tag.find("dt", class_="sig sig-object py").get("id")

                    if not id.endswith(".get_operation") \
                    and not id.endswith(".from_proto") and not id.endswith(".to_proto") \
                    and not id.endswith(".from_string") and not id.endswith("__") \
                    and not id.endswith("HasField") and not id.endswith("WhichOneof") \
                    and not id in python_ignore_apis:

                        ## Determine method name, but don't save to dictionary as value; we use it as a key instead:
                        method_name = id.rsplit('.',1)[1]

                        ## Look up method_name in proto_map file, and return matching proto:
                        with open(proto_map_file, 'r') as f:
                            for row in f:
                                if not row.startswith('#') \
                                and row.startswith(resource + ',') \
                                and row.split(',')[3] == method_name:
                                    this_method_dict["proto"] = row.split(',')[1]

                        ## Determine method description, stripping newlines. If not present, skip:
                        if tag.find('dd').p:
                            this_method_dict["description"] = tag.find('dd').p.text.replace("\n", " ")

                        ## Determine method direct link, no need to parse for it, it's inferrable.
                        ## If we are scraping from a local staging instance, replace host and port with upstream link target URL:
                        if python_staging_url != '':
                            this_method_dict["method_link"] = str(url + "#" + id).replace(python_staging_url, 'https://python.viam.dev')
                        else:
                            this_method_dict["method_link"] = url + "#" + id

                        ## Assemble array of all tags which contain parameters for this method:
                        ## METHODOLOGY: tag: em, class: sig-param, and not * or **kwargs:
                        parameter_tags = tag.find_all(
                            lambda tag: tag.name == 'em'
                            and tag.get('class') == ['sig-param']
                            and not regex.search(r'\*', tag.text))

                        if len(parameter_tags) != 0:

                            ## Create new empty dictionary for this_method_dict named "parameters":
                            this_method_dict["parameters"] = {}

                            # Iterate through each parameter found for this method:
                            for parameter_tag in parameter_tags:
                                ## Create new empty dictionary this_method_parameters_dict to house all parameter
                                ## keys for this method, to allow for multiple parameters. Also resets the
                                ## previous parameter's data when looping through multiple parameters:
                                this_method_parameters_dict = {}

                                ## Determine parameter name, but don't save to dictionary as value; we use it as a key instead:
                                param_name = parameter_tag.find('span', class_="pre").text

                                ## Determine parameter type:
                                param_type = parameter_tag.find_all('span', class_='n')[1].text

                                ## Determine if this parameter is optional, and strip off ' | None' syntax if so:
                                if param_type.endswith(' | None'):
                                    this_method_parameters_dict["optional"] = True
                                    param_type = param_type.replace(' | None', "")

                                else:
                                    this_method_parameters_dict["optional"] = False

                                ## 'Extra' params do not appear in "Parameters" section (Except for PySDK > Motion Service),
                                ## so we must populate this param's content manually:
                                if param_name == 'extra':

                                    this_method_parameters_dict["param_description"] = "Extra options to pass to the underlying RPC call."
                                    this_method_parameters_dict["param_usage"] = "extra (Mapping[str, Any]) - Extra options to pass to the underlying RPC call."
                                    this_method_parameters_dict["param_type"] = "Mapping[[str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str), Any]"

                                ## 'Timeout' params do not appear in "Parameters" section (Except for PySDK > Motion Service),
                                ## so we must populate this param's content manually:
                                elif param_name == 'timeout':

                                    this_method_parameters_dict["param_description"] = "An option to set how long to wait (in seconds) before calling a time-out and closing the underlying RPC call."
                                    this_method_parameters_dict["param_usage"] = "timeout (float) - An option to set how long to wait (in seconds) before calling a time-out and closing the underlying RPC call."
                                    this_method_parameters_dict["param_type"] = "[float](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex)"

                                ## Initial method usage syntax and Parameters section do not agree on param_type for do_command.
                                ## Manually override with correct values, for param 'command' only:
                                elif method_name == 'do_command' and param_name == 'command':

                                    this_method_parameters_dict["param_description"] = "The command to execute"
                                    this_method_parameters_dict["param_usage"] = "command (Mapping[str, ValueTypes]) – The command to execute"
                                    this_method_parameters_dict["param_type"] = "Mapping[[str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str), ValueTypes]"

                                else:

                                    ## First, check python_datatype_links array for manually-mapped data type links.
                                    ## These will override all other ways of determining data type links:
                                    linked_param_type = ""
                                    linked_param_type = link_data_types('python', param_type)

                                    ## If link_data_types() returns a linked data type string, use that.
                                    ## Otherwise, check the scraped parameter_tag for the link:
                                    if linked_param_type != "":
                                        this_method_parameters_dict["param_type"] = linked_param_type
                                    elif parameter_tag.find('a', class_="reference internal"):
                                        param_type_link_raw = parameter_tag.find('a', class_="reference internal").get("href")

                                        ## Parameter type link is an anchor link:
                                        if param_type_link_raw.startswith('#'):
                                            this_method_parameters_dict["param_type"] = '[' + param_type + '](' + url + param_type_link_raw + ')'
                                        ## Parameter type link is a relative link, in one of three forms:
                                        elif param_type_link_raw.startswith('../../../'):
                                            this_method_parameters_dict["param_type"] = '[' + param_type + '](' + sdk_url + "/autoapi/viam/" + param_type_link_raw.replace('../../../', '')+ ')'
                                        elif param_type_link_raw.startswith('../../'):
                                            this_method_parameters_dict["param_type"] = '[' + param_type + '](' + sdk_url + "/autoapi/viam/" + param_type_link_raw.replace('../../', '')+ ')'
                                        elif param_type_link_raw.startswith('../'):
                                            this_method_parameters_dict["param_type"] = '[' + param_type + '](' + sdk_url + "/autoapi/viam/" + param_type_link_raw.replace('../', '')+ ')'

                                    else:
                                        this_method_parameters_dict["param_type"] = param_type

                                    ## Get parameter usage and description, if method contains a "Parameters" section. Otherwise omit.
                                    ## NOTE: We can't just use the initial param content as found above, because it does not contain descriptions,
                                    ## and we can't just use this "Parameters" section, because it does not (usually) contain things like `extra` and `timeout`.
                                    ## METHODOLOGY: Find parent <p> tag around matching <strong>param_name</strong> tag which contains this data.
                                    ##   Determining by <strong> tags allows matching parameters regardless whether they are
                                    ##   presented in <p> tags (single param) or <li> tags (multiple params):
                                    for strong_tag in tag.find_all('strong'):
                                        ## We have to explicitly exclude extra and timeout from this loop also,
                                        ## because Python Motion service includes them explicitly as well:
                                        if param_name != 'extra' and \
                                            param_name != 'timeout' and \
                                            strong_tag.text == param_name:

                                            ## OPTION: Get just the parameter description, stripping all newlines:
                                            this_method_parameters_dict["param_description"] = regex.split(r" – ", strong_tag.parent.text)[1].replace("\n", " ")

                                            ## OPTION: Get full parameter usage string, stripping all newlines:
                                            ## NOTE: Currently unused.
                                            this_method_parameters_dict['param_usage'] = strong_tag.parent.text.replace("\n", " ")

                                            ## Some params provide data type links in Parameters section only, not initial usage.
                                            ## Get that here if so:
                                            if strong_tag.parent.find('a', class_="reference internal"):
                                                param_type_link_raw = strong_tag.parent.find('a', class_="reference internal").get("href")
                                                ## Parameter type link is an anchor link:
                                                if param_type_link_raw.startswith('#') and python_staging_url == '':
                                                    this_method_parameters_dict["param_type"] = '[' + param_type + '](' + url + param_type_link_raw + ')'
                                                elif param_type_link_raw.startswith('#') and python_staging_url != '':
                                                    this_method_parameters_dict["param_type"] = '[' + param_type + '](' + url.replace(python_staging_url, sdk_url) + param_type_link_raw + ')'
                                                ## Parameter type link is a relative link, beginning with 1 - 3 instances of '../'
                                                ## Convert to an absolute link:
                                                elif param_type_link_raw.startswith('../') \
                                                    and not param_type_link_raw.startswith('../../'):
                                                    if resource in python_resource_overrides:
                                                        linkable_resource = python_resource_overrides[resource]
                                                    else:
                                                        linkable_resource = resource
                                                    this_method_parameters_dict["param_type"] = f'[{param_type}]({sdk_url}/autoapi/viam/{type}s/{linkable_resource}/' + param_type_link_raw.replace('../', '')+ ')'
                                                elif param_type_link_raw.startswith('../'):
                                                    this_method_parameters_dict["param_type"] = '[' + param_type + '](' + sdk_url + "/autoapi/viam/" + param_type_link_raw.replace('../', '')+ ')'

                                            ## Unable to determine parameter description, neither timeout or extra, nor matching to any
                                            ## param in initial method usage string. Usually this means a non-param (like error raised),
                                            ## but if we are missing expected param descriptions, expand this section to catch them.
                                            else:
                                                ## No-op:
                                                pass

                                this_method_dict["parameters"][param_name] = this_method_parameters_dict

                        ## Get single tag containing the return for this method:
                        return_tag = tag.find('span', class_='sig-return')

                        ## Parse return for this method:
                        ## METHODOLOGY: Some methods explicitly state that they return "None", others just omit the field.
                        ##   Either way, ensure we only write a return to this_method_dict if an actual return is present:
                        if return_tag and return_tag.find('span', class_='pre').text != "None":

                            ## Create new empty dictionary for this_method_dict named "return":
                            this_method_dict["return"] = {}

                            ## OPTION: Get return_type by explicit key name:
                            return_type = return_tag.find('span', class_="sig-return-typehint").text
                            this_method_dict["return"]["return_type"] = return_type

                            linked_return_type = ""
                            linked_return_type = link_data_types('python', return_type)

                            if linked_return_type != "":
                                this_method_dict["return"]["return_type"] = linked_return_type
                            elif return_tag.find('a', class_="reference internal"):

                                ## TODO: Only grabbing the first link encountered, but a few methods return a tuple of two linked data types.
                                ## Handling those via link_data_types() with manual entries in python_datatype_links for now,
                                ## But there's room for a more elegant solution:
                                return_type_link_raw = return_tag.find('a', class_="reference internal").get("href")

                                ## Return type link is an anchor link:
                                if return_type_link_raw.startswith('#') and python_staging_url == '':
                                    this_method_dict["return"]["return_type"] = '[' + return_type + '](' + url + return_type_link_raw + ')'
                                elif return_type_link_raw.startswith('#') and python_staging_url != '':
                                    this_method_dict["return"]["return_type"] = '[' + return_type + '](' + url.replace(python_staging_url, sdk_url) + return_type_link_raw + ')'
                                ## Return type link is a relative link, beginning with 1 - 3 instances of '../'
                                ## Convert to an absolute link:
                                elif return_type_link_raw.startswith('../') \
                                    and not return_type_link_raw.startswith('../../'):
                                    if resource in python_resource_overrides:
                                        linkable_resource = python_resource_overrides[resource]
                                    else:
                                        linkable_resource = resource
                                    this_method_dict["return"]["return_type"] = f'[{return_type}]({sdk_url}/autoapi/viam/{type}s/{linkable_resource}/' + return_type_link_raw.replace('../', '')+ ')'
                                elif return_type_link_raw.startswith('../'):
                                    this_method_dict["return"]["return_type"] = '[' + return_type + '](' + sdk_url + "/autoapi/viam/" + return_type_link_raw.replace('../', '')+ ')'

                            ## OPTION: Get full return usage, including type info and html links if present, stripping all newlines:
                            ## NOTE: Currently unused.
                            this_method_dict["return"]["return_usage"] = str(return_tag.find('span', class_="sig-return-typehint")).replace("\n", " ")

                            ## Get return description from "Returns" section if present:
                            if tag.find(string="Returns"):

                                ## METHODOLOGY: Return description is always in <dd> tag with class either 'field-odd' or 'field-even',
                                ##   but this is the same as "Parameters" description. Returns differ by not being enclosed in <strong> tags:
                                return_description_raw = tag.find_all(
                                       lambda tag: tag.name == 'dd'
                                       and not tag.find_next('p').strong
                                       and (tag.get('class') == ['field-odd']
                                       or tag.get('class') == ['field-even']))

                                ## Append to ongoing this_method_dict, stripping newlines:
                                this_method_dict["return"]["return_description"] = return_description_raw[0].p.text.replace("\n", " ")

                        ## If method has a "Raises" section, determine method errors raised:
                        if tag.find(string="Raises"):

                            ## Create new empty dictionary for this_method_dict named "raises",
                            ## and new empty dictionary this_method_raises_dict to house all errors raised
                            ## keys for this method, to allow for multiple errors raised:
                            this_method_dict["raises"] = {}

                            ## Iterate through all <strong> tags in method tag:
                            for strong_tag in tag.find_all('strong'):

                                ## Create new empty dictionary this_method_raises_dict to house all raises (errors)
                                ## keys for this method, to allow for multiple errors raised. Also resets the
                                ## previous error's data when looping through multiple errors:
                                this_method_raises_dict = {}

                                ## Determine if this <strong> tag is preceded by a <dt> tag containing the text "Raises". Otherwise omit.
                                ## METHODOLOGY: Find previous <dt> tag before matching <strong>param_name</strong> tag which contains this data.
                                ##   Determining by <strong> tags allows matching parameters regardless whether they are
                                ##   presented in <p> tags (single error raised) or <li> tags (multiple errors raised):
                                if strong_tag.find_previous('dt').text == "Raises:":

                                    ## Split contained text at " - " to get first half, which is just the error name:
                                    raises_name = regex.split(r" – ", strong_tag.parent.text)[0]

                                    ## Process remaining data fields depending on whether the error data type is linked or not.
                                    ## If the error includes a linked data type:
                                    if strong_tag.parent.name == 'a':

                                        ## OPTION: Get full error raised usage, including type info and html links if present.
                                        ## NOTE: Currently unused.
                                        raises_usage = str(strong_tag.parent.parent).replace("\n", " ")
                                        raises_link = strong_tag.parent.get('href')

                                        ## Replace the scraped relative link with a full URL, in one of two forms:
                                        ## Scraped link is an anchor link:
                                        if raises_link.startswith('#'):
                                            this_method_raises_dict["raises_usage"] = regex.sub(r'href=".*"', 'href="' + url + raises_link + '"', raises_usage)
                                        ## Scraped link is a relative link:
                                        elif raises_link.startswith('../'):
                                            this_method_raises_dict["raises_usage"] = regex.sub(r'href=".*"', 'href="' + sdk_url + '/autoapi/viam/' + raises_link.replace('../', '') + '"', raises_usage)

                                        ## OPTION: Determine error raised description, stripping any newlines:
                                        this_method_raises_dict["raises_description"] = regex.split(r" – ", strong_tag.parent.parent.text)[1].replace("\n", " ")

                                    ## If the error does not include a linked data type:
                                    else:
                                        ## OPTION: Get full error raised usage:
                                        ## NOTE: Currently unused.
                                        this_method_raises_dict["raises_usage"] = str(strong_tag.parent).replace("\n", " ")

                                        ## OPTION: Determine error raised description, stripping any newlines:
                                        this_method_raises_dict["raises_description"] = regex.split(r" – ", strong_tag.parent.text)[1].replace("\n", " ")

                                    ## Add all values for this raised error to this_method_dict by raises_name:
                                    this_method_dict["raises"][raises_name] = this_method_raises_dict

                        ## Determine if a code sample is provided for this method:
                        if tag.find('div', class_="highlight"):

                            ## Fetch code sample raw text, preserving newlines but stripping all formatting.
                            ## This string should be suitable for feeding into any python formatter to get proper form:
                            this_method_dict["code_sample"] = tag.find('div', class_="highlight").pre.text

                        # For do_command, update the code sample to be more specific:
                        if method_name == "do_command":
                            if type == "service":
                                this_method_dict["code_sample"] = this_method_dict["code_sample"].replace("  # replace SERVICE with the appropriate class", "")
                                service_class = resource.title() + "Client"
                                if resource == "mlmodel":
                                    service_class = "MLModelClient"
                                elif resource == "generic_service":
                                    service_class = "Generic"
                                elif resource == "slam":
                                    service_class = "SLAMClient"
                                this_method_dict["code_sample"] = this_method_dict["code_sample"].replace("SERVICE", service_class)
                                if not resource in ["motion"]:
                                    this_method_dict["code_sample"] = this_method_dict["code_sample"].replace("builtin", "my_{}_svc".format(resource))
                            else:
                                this_method_dict["code_sample"] = this_method_dict["code_sample"].replace("component", "my_{}".format(resource))

                        # For get_geometries, update the code sample to be more specific:
                        if method_name == "get_geometries":
                            if type == "service":
                                this_method_dict["code_sample"] = this_method_dict["code_sample"].replace("component", "my_{}_svc".format(resource))
                            else:
                                this_method_dict["code_sample"] = this_method_dict["code_sample"].replace("component", "my_{}".format(resource))

                        # For close, update the code sample to be more specific:
                        if method_name == "close":
                            if type == "service":
                                if resource == "generic_service":
                                    this_method_dict["code_sample"] = "await my_{}.close()\n".format(resource)
                                else:
                                    this_method_dict["code_sample"] = "await my_{}_svc.close()\n".format(resource)
                            elif type == "component":
                                this_method_dict["code_sample"] = "await my_{}.close()\n".format(resource)

                        # For get_resource_name, update the code sample to be more specific:
                        if method_name == "get_resource_name":
                            if type == "service":
                                service_class = resource.title().replace('_','') + "Client"
                                if resource == "mlmodel":
                                    service_class = "MLModelClient"
                                elif resource == "generic_service":
                                    service_class = "Generic"
                                elif resource == "slam":
                                    service_class = "SLAMClient"
                                this_method_dict["code_sample"] = 'my_{}_svc_name = {}.get_resource_name("my_{}_svc")\n'.format(resource, service_class ,resource)
                            else:
                                if resource == "input_controller":
                                    this_method_dict["code_sample"] = 'my_input_controller_name = Controller.get_resource_name("my_input_controller")\n'
                                elif resource == "generic_component":
                                    this_method_dict["code_sample"] = 'my_generic_component_name = Generic.get_resource_name("my_generic_component")\n'
                                else:
                                    this_method_dict["code_sample"] = 'my_{}_name = {}.get_resource_name("my_{}")\n'.format(resource, resource.title().replace('_','') ,resource)

                        ## We have finished collecting all data for this method. Write the this_method_dict dictionary
                        ## in its entirety to the python_methods dictionary by type (like 'component'), by resource (like 'arm'),
                        ## using the method_name as key:

                        python_methods[type][resource][method_name] = this_method_dict

                ## We have finished looping through all scraped Python methods. Write the python_methods dictionary
                ## in its entirety to the all_methods dictionary using "python" as the key:
                all_methods["python"] = python_methods

            ## Scrape each parent method tag and all contained child tags for Flutter by resource.
            ## TEMP: Manually exclude Base Remote Control Service (Go only).
            ## TODO: Handle resources with 0 implemented methods for this SDK better.
            elif sdk == "flutter" and resource != 'base_remote_control' and resource != 'encoder' and resource != 'input_controller' \
                and resource != 'data_manager' and resource != 'generic_service' and resource !='mlmodel' and resource !='motion' \
                and resource !='navigation' and resource !='slam' and type !='app':
                soup = make_soup(url)

                if resource in flutter_resource_overrides:
                    flutter_resource = flutter_resource_overrides[resource]
                else:
                    flutter_resource = resource.capitalize()
                ## Limit matched class to either 'callable' or 'callable inherited' and remove the constructor (proto id) itself:
                flutter_methods_raw = soup.find_all(
                    lambda tag: tag.name == 'dt'
                    and not tag.get('id') == flutter_resource
                    and tag.has_attr("class")
                    and "callable" in tag.get("class"))

                ## Loop through scraped tags and select salient data:
                for tag in flutter_methods_raw:

                    ## Create new empty dictionary for this specific method, to be appended to ongoing flutter_methods dictionary,
                    ## in form: flutter_methods[type][resource][method_name] = this_method_dict
                    this_method_dict = {}

                    method_name = tag.get('id')

                    if not method_name in flutter_ignore_apis:

                        ## Look up method_name in proto_map file, and return matching proto:
                        with open(proto_map_file, 'r') as f:
                            for row in f:
                                ## Because Flutter is the final entry in the mapping CSV, we must also rstrip() to
                                ## strip the trailing newline (\n) off the row itself:
                                row = row.rstrip()

                                if not row.startswith('#') \
                                and row.startswith(resource + ',') \
                                and row.split(',')[5] == method_name:
                                    this_method_dict["proto"] = row.split(',')[1]

                        ## Determine method link:
                        method_link = tag.find("span", class_="name").a['href'].replace("..", sdk_url)
                        this_method_dict["method_link"] = method_link

                        ## While some method info is available to us on this current Flutter SDK page, the code sample is only found on the
                        ## method_link page. So we scrape that page for everything:
                        method_soup = make_soup(method_link)

                        ## Method description and code samples are both found within the same section tag:
                        desc_or_code_sample = method_soup.find('section', class_ = 'desc markdown')

                        if desc_or_code_sample:
                            if desc_or_code_sample.p:
                                this_method_dict["method_description"] = desc_or_code_sample.p.text
                            if desc_or_code_sample.pre:
                                this_method_dict["code_sample"] = desc_or_code_sample.pre.text

                        parameter_tags = method_soup.find_all(
                            lambda tag: tag.name == 'span'
                            and tag.get('class') == ['parameter'])

                        ## Parse parameters, if any are found:
                        if len(parameter_tags) != 0:

                            ## Create new empty dictionary for this_method_dict named "parameters":
                            this_method_dict["parameters"] = {}

                            optional = False

                            # If there is a curly brace before the parameter list all parameters are optional
                            prev = parameter_tags[0].find_previous('section')
                            if prev:
                                if "{<ol" in str(prev):
                                    optional = True

                            for parameter_tag in parameter_tags:

                                ## Create new empty dictionary this_method_parameters_dict to house all parameter
                                ## keys for this method, to allow for multiple parameters. Also resets the
                                ## previous parameter's data when looping through multiple parameters:
                                this_method_parameters_dict = {}

                                ## Parse for param name and usage string, convert to string (for markdownify):
                                param_name = parameter_tag.find('span', class_ = 'parameter-name').text
                                param_usage = str(parameter_tag.find('span', class_ = 'type-annotation')).replace('>>', '>\\>')

                                ## Markdownify parameter usage and replace relative links with absolute:
                                formatted_param_usage = md(param_usage, strip=['wbr']).replace("../../", "https://flutter.viam.dev/")
                                this_method_parameters_dict["param_usage"] = formatted_param_usage

                                # if a parameter is optional the previous parameter has a curly brace before it
                                this_method_parameters_dict["optional"] = optional

                                this_method_dict["parameters"][param_name] = this_method_parameters_dict

                                if parameter_tag.text.endswith("{"):
                                    optional = True

                        return_tags = method_soup.find_all(
                            lambda tag: tag.name == 'span'
                            and tag.get('class') == ['returntype'])

                        if len(return_tags) != 0:

                            ## Create new empty dictionary for this_method_dict named "return":
                            this_method_dict["return"] = {}

                            for return_tag in return_tags:

                                ## Create new empty dictionary this_method_returns_dict to house all return
                                ## keys for this method, to allow for multiple returns. Also resets the
                                ## previous return's data when looping through multiple returns:
                                this_method_return_dict = {}

                                # Parse return usage string, convert to string (for markdownify):
                                return_usage = str(return_tag)

                                ## Markdownify return usage and replace relative links with absolute:
                                formatted_return_usage = md(return_usage, strip=['wbr']).replace("../../", "https://flutter.viam.dev/")
                                this_method_return_dict["return_usage"] = formatted_return_usage.replace('>>', '>\\>')

                                # Parse return type:
                                if return_tag.find('span', class_ = 'type-parameter'):
                                    return_type = return_tag.find('span', class_ = 'type-parameter').text
                                else:
                                    return_type = return_tag.text

                                this_method_dict["return"][return_type] = this_method_return_dict

                        flutter_methods[type][resource][method_name] = this_method_dict

                ## We have finished looping through all scraped Flutter methods. Write the flutter_methods dictionary
                ## in its entirety to the all_methods dictionary using "flutter" as the key:
                all_methods["flutter"] = flutter_methods

            elif sdk == "flutter" and type == "app":
                ##Flutter SDK has no APP API!
                pass

            else:
                ## Good code would never get here.
                ## This code gets here when facing a resource with 0 implemented methods for
                ## the SDK we're looping for.
                ## TODO: Fix so resources with 0 implemented methods for an SDK are silently
                ## skipped without requiring manual exclusion in parse().
                pass

    return all_methods


# Parse usage string, used in write_markdown():
def parse_method_usage(usage_string):

    # Splitting the usage string by comma to separate parameters and removing unwanted substrings
    parameters = list(filter(None, (param.strip() for param in usage_string.replace("\n\t\t", "").replace("\n\t,", "").replace("\n\t", "").split(','))))
    parsed_usage_string = []

    for param in parameters:
        ## Discard false-positive match for some Go SDK resources which choose to render each param on a newline,
        ## resulting in trailing ',\n)' syntax that is otherwise interpreted here as a param named ')':
        if param != ')':

            ## HACKY: Hardcoding several params and returns. These are: the ctx, extra, and cmd params,
            ## the error return, and several parameters that require type inference.
            if param.startswith('ctx'):
                type_name = "ctx"
                param_type = "Context"
                param_type_link = "https://pkg.go.dev/context#Context"
            elif param.startswith('extra'):
                type_name = "extra"
                param_type = "map[string]interface{}"
                param_type_link = "https://go.dev/blog/maps"
            elif 'cmd' in param:
                type_name = "cmd"
                param_type = "map[string]interface{}"
                param_type_link = "https://go.dev/blog/maps"
            elif param == '<a href="/builtin#error">error</a>':
                type_name = ""
                param_type = "error"
                param_type_link = "https://pkg.go.dev/builtin#error"
            else:
                param_raw = regex.sub(r'<.*?>', '', param).removesuffix(')').split()
                ## Handle channel data types (only used for Board > StreamTicks):
                if len(param_raw) == 3 and param_raw[0] == 'ch':
                    type_name = 'ch chan'
                    param_type = 'Tick'
                    type_link = '#Tick'
                ## Handle named parameters:
                elif len(param_raw) == 2:
                    type_name = param_raw[0]
                    param_type = param_raw[1]
                    type_link = regex.findall(r'href="([^"]+)">', param)[-1]
                ## Handle returns, or parameters with inferred data types:
                elif len(param_raw) == 1:
                    ## Hardcode for type inference for angleDeg param:
                    if param_raw[0] == 'angleDeg':
                        type_name = 'angleDeg'
                        param_type = 'float64'
                        type_link = '/builtin#float64'
                    ## Hardcode for type inference for linear param:
                    elif param_raw[0] == 'linear':
                        type_name = 'linear'
                        param_type = 'r3.Vector'
                        type_link = '/github.com/golang/geo/r3#Vector'
                    ## Hardcode for type inference for positionsMm param:
                    elif param_raw[0] == 'positionsMm':
                        type_name = 'positionsMm'
                        param_type = '[]float64'
                        type_link = '/builtin#float64'
                    ## Hardcode for type inference for rpm param:
                    elif param_raw[0] == 'rpm':
                        type_name = 'rpm'
                        param_type = 'float64'
                        type_link = '/builtin#float64'
                    ## Hardcode for type inference for srcName param:
                    elif param_raw[0] == 'srcName':
                        type_name = 'srcName'
                        param_type = 'string'
                        type_link = '/builtin#string'
                    ## Handle returns:
                    else:
                        type_name = ''
                        param_type = param_raw[0]
                        type_link = regex.findall(r'href="([^"]+)">', param)[-1]

                if type_link:
                    param_type_link = type_link
                else:
                    param_type_link = None

            parsed_usage_string.append((type_name, param_type, param_type_link))

    return parsed_usage_string

# Format usage string, used in write_markdown():
def format_method_usage(parsed_usage_string, go_method_name, resource, path_to_methods_override, method_link):
    formatted_output = []
    for type_name, param_type, param_type_link in parsed_usage_string:

        return_string = ""

        ## Creating the parameter type link depending on whether it is an absolute
        ## or relative link, using passed method_link if the latter:
        if param_type_link and param_type_link.startswith('/'):
            param_type_link = f"https://pkg.go.dev{param_type_link}"
        elif param_type_link and param_type_link.startswith('#'):
            param_type_link_base = regex.sub(r'#.*', '', method_link)
            param_type_link = f"{param_type_link_base}{param_type_link}"

        ## Hardcode select parameters / returns, in order to provide their descriptions:
        if type_name == "ctx":
            return_string += f"- `{type_name}` [({param_type})]({param_type_link}): A Context carries a deadline, a cancellation signal, and other values across API boundaries."
        elif type_name == "extra":
            return_string += f"- `{type_name}` [({param_type})]({param_type_link}): Extra options to pass to the underlying RPC call."
        elif go_method_name == "DoCommand" and type_name == "cmd":
            return_string += f"- `{type_name}` [({param_type})]({param_type_link}): The command to execute."
        elif go_method_name == "Reconfigure" and type_name == "deps":
            return_string += f"- `{type_name}` [({param_type})]({param_type_link}): The resource dependencies."
        elif go_method_name == "Reconfigure" and type_name == "conf":
            return_string += f"- `{type_name}` [({param_type})]({param_type_link}): The resource configuration."
        elif go_method_name == "DoCommand" and param_type == "map[string]interface{}":
            return_string += f"- [({param_type})]({param_type_link}): The command response."
        elif go_method_name == "Geometries" and param_type == "[]spatialmath.Geometry":
            return_string += f"- [({param_type})]({param_type_link}): The geometries associated with this resource, in any order."
        elif go_method_name == "IsMoving" and param_type == "bool":
            return_string += f"- [({param_type})]({param_type_link}): Whether this resource is moving (`true`) or not (`false`)."
        elif go_method_name == "Readings" and param_type == "map[string]interface{}":
            return_string += f"- [({param_type})]({param_type_link}): A map containing the measurements from the sensor. Contents depend on sensor model and can be of any type."
        elif param_type == "error":
            return_string += f"- [({param_type})]({param_type_link}): An error, if one occurred."
        else:
            ## Check for param and return description overrides:
            param_or_return_description = ''
            ## Param override:
            if type_name != '':
                # To handle 'ch chan' param name, similar. Use as 'ch' in override filename:
                if ' ' in type_name:
                    type_name_short = type_name.split(' ')[0]
                else:
                    type_name_short = type_name

                ## .../overrides/methods/{sdk}.{resource}.{method_name}.{param_name}.md
                param_desc_override_file = path_to_methods_override + '/go.' + resource + '.' + go_method_name + '.' + type_name_short + '.md'
            ## Return override:
            else:
                if 'map[string]interface{}' in param_type:
                    return_type_short = 'string'
                elif '.' in param_type:
                    return_type_short = param_type.split('.')[-1]
                elif ']' in param_type:
                    return_type_short = param_type.split(']')[-1]
                else:
                    return_type_short = param_type

                return_type_short = return_type_short.removeprefix('[]').removeprefix('*')

                ## .../overrides/methods/{sdk}.{resource}.{method_name}.{return_type_short}.return.md
                param_desc_override_file = path_to_methods_override + '/go.' + resource + '.' + go_method_name + '.' + return_type_short + '.return.md'

            if args.overrides:
                print(param_desc_override_file)

            if os.path.exists(param_desc_override_file):
                preserve_formatting = False
                for line in open(param_desc_override_file, 'r', encoding='utf-8'):
                    if '<!-- preserve-formatting -->' in line:
                        preserve_formatting = True
                    if preserve_formatting and '<!-- preserve-formatting -->' not in line:
                        param_or_return_description = param_or_return_description + line
                    elif '<!-- preserve-formatting -->' not in line:
                        param_or_return_description = param_or_return_description + line.replace('\n', ' ')
                param_or_return_description = param_or_return_description.rstrip()

            ## If we have a param description override, use that. If not, skip:
            if param_or_return_description != '':

                ## Add a trailing period if it is missing, either from upstream or from override file,
                ## but skip doing so if the copy instead ends with an HTML tag (like a closing '</ul>' tag):
                if not param_or_return_description.endswith('.') and not param_or_return_description.endswith('>'):
                    param_or_return_description = param_or_return_description + '.'

                ## Format returns:
                if type_name == '':
                   return_string += f"- [({param_type})]({param_type_link}): {param_or_return_description}"
                ## Format parameters:
                else:
                   return_string += f"- `{type_name}` [({param_type})]({param_type_link}): {param_or_return_description}"
            else:
                ## Format returns:
                if type_name == '':
                   return_string += f"- [({param_type})]({param_type_link})"
                ## Format parameters:
                else:
                   return_string += f"- `{type_name}` [({param_type})]({param_type_link})"

        formatted_output.append(return_string.rstrip())

    return formatted_output

## write_markdown() takes the data object returned from parse(), and writes out the markdown
## for each method in that object:
def write_markdown(type, names, methods):

    ## Generate special version of type var that matches how we refer to it in MD filepaths.
    ## This means pluralizing components and services, and taking no action for app and robot:
    if type in ['component', 'service']:
        type_filepath_name = type + 's'
    else:
        type_filepath_name = type

    ## Set 'generated' folder structure and 'override' directories:
    relative_generated_path = 'static/include/' + type_filepath_name + '/apis/generated/'
    path_to_generated = os.path.join(gitroot, relative_generated_path)
    relative_override_path = 'static/include/' + type_filepath_name + '/apis/overrides/'
    path_to_overrides = os.path.join(gitroot, relative_override_path)
    path_to_protos_override = os.path.join(path_to_overrides, 'protos')
    path_to_methods_override = os.path.join(path_to_overrides, 'methods')

    ## Create any missing directories, or take no action if already present:
    Path(path_to_generated).mkdir(parents=True, exist_ok=True)
    Path(path_to_protos_override).mkdir(parents=True, exist_ok=True)
    Path(path_to_methods_override).mkdir(parents=True, exist_ok=True)

    ## NOTE: To use the above override directories, place a file at one of these locations.
    ## IMPORTANT: Filenames are CASE-SENSITIVE!
    ## To override a proto with custom leading MD content, place a file here:
    ##    docs/static/include/{type}/apis/overrides/protos/{resource}.{proto_name}.md
    ## To override a method with custom leading MD content, place a file here:
    ##    docs/static/include/{type}/apis/overrides/methods/{sdk}.{resource}.{method_name}.before.md
    ## To override a method with custom trailing MD content, place a file here:
    ##    docs/static/include/{type}/apis/overrides/methods/{sdk}.{resource}.{method_name}.after.md
    ## To override a specific parameter description for a method with custom MD content, place a file here:
    ##    docs/static/include/{type}/apis/overrides/methods/{sdk}.{resource}.{method_name}.{parameter_name}.md
    ## To override a specific return description for a method with custom MD content, place a file here:
    ##    For Python (can have only one return, returns are not named):
    ##        docs/static/include/{type}/apis/overrides/methods/{sdk}.{resource}.{method_name}.return.md
    ##    For Flutter (can have multiple returns, returns are not named):
    ##        docs/static/include/{type}/apis/overrides/methods/{sdk}.{resource}.{method_name}.{return_type_short}.return.md
    ##    For Go (can have multiple returns, returns are not named):
    ##        docs/static/include/{type}/apis/overrides/methods/{sdk}.{resource}.{method_name}.{return_type_short}.return.md

    ## Loop through each resource, such as 'arm'. run() already calls parse() in
    ## scope limited to 'type', so we don't have to loop by type:
    for resource in names:

        ## Switch to identify the first method encountered for each resource, to help with
        ## knowing when we are at the top of the include file, or whether to double newline
        ## between protos:
        is_first_method_in_this_resource = True

        ## Determine where to write output for this resource:
        full_path_to_resource_file = os.path.join(path_to_generated, resource + '.md')
        output_file = open('%s' % full_path_to_resource_file, "w")

        ## Determine where to write API protos list table for this resource:
        full_path_to_table_file = os.path.join(path_to_generated, resource + '-table.md')
        table_file = open('%s' % full_path_to_table_file, "w")

        ## Loop through mapping file, and determine which sdk methods to document for each proto:
        with open(proto_map_file, 'r') as f:
            for row in f:
                if not row.startswith('#') \
                and row.startswith(resource + ','):
                    proto = row.split(',')[1]
                    micro_rdk_support = row.split(',')[2]
                    py_method_name = row.split(',')[3]
                    go_method_name = row.split(',')[4]
                    flutter_method_name = row.split(',')[5].rstrip()

                    ## Allow setting protos with 0 sdk method maps, to allow us to disable writing MD
                    ## for specific protos as needed, if needed:
                    if (py_method_name and "python" in sdks) or (go_method_name and "go" in sdks) or (flutter_method_name and "flutter" in sdks):

                        ## We have at least one implemented method for this proto, so begin writing output markdown for this resource.
                        ## Write proto as H3, with leading newlines if appending to ongoing {resource}.md file:
                        if is_first_method_in_this_resource:
                            output_file.write('### ' + proto + '\n\n')
                        else:
                            output_file.write('\n### ' + proto + '\n\n')

                        ## NOTE: This is where proto descriptions could go if we scraped them. However:
                        ## - Some protos do not have descriptions.
                        ## - DOCS provides vastly better descriptions in some cases.
                        ## - DOCS descriptions are often deeply linked to DOCS content.
                        ## We use the proto override system instead to provide these proto descriptions.
                        ## TODO: Consider adding/enhancing proto descriptions to viamrobotics/api,
                        ## and adding descriptions scraping to get_proto_apis().

                        proto_override_filename = resource + '.' + proto + '.md'

                        ## .../overrides/protos/{resource}.{proto}
                        proto_override_file = os.path.join(path_to_protos_override, proto_override_filename)
                        if os.path.isfile(proto_override_file):

                            for line in open(proto_override_file, 'r', encoding='utf-8'):
                               output_file.write(line)

                            if micro_rdk_support == "Yes":
                                output_file.write('Supported by `viam-micro-server`.\n')

                            output_file.write('\n')

                        ## We have at least one implemented method for this proto, so begin writing table list markdown for this resource.
                        ## Add proto name to table_file listing, with standard first three lines.
                        ## We write this here, depending on is_first_method_in_this_resource, in case we have a resource with 0 implemented protos
                        ## down the line, to avoid blank table_files:
                        if is_first_method_in_this_resource and resource != 'movement_sensor':
                            table_file.write('<!-- prettier-ignore -->\n')
                            if micro_rdk_support != '':
                                table_file.write('| Method Name | Description | `viam-micro-server` Support |\n')
                                table_file.write('| ----------- | ----------- | --------------------------- |\n')
                            else:
                                table_file.write('| Method Name | Description |\n')
                                table_file.write('| ----------- | ----------- |\n')

                        ## Determine what the anchor link structure should be for this resource. Each type has its own standard:
                        proto_link = proto.replace('.', '').lower()

                        if type == 'component':
                            ## Replace underscores, and convert generic_component to just generic:
                            resource_adjusted = resource.replace('generic_component', 'generic').replace('_','-')
                            proto_anchor_link = '/appendix/apis/components/' + resource_adjusted + '/#' + proto_link
                        elif type == 'service' and resource in ['base_remote_control', 'motion', 'navigation', 'slam', 'vision']:
                            proto_anchor_link = '/appendix/apis/services/' + resource.replace('base_remote_control', 'base-rc') + '/#' + proto_link
                        elif type == 'service' and resource == 'data_manager':
                            proto_anchor_link = '/appendix/apis/services/data/#' + proto_link
                        elif type == 'service' and resource == 'generic_service':
                            proto_anchor_link = '/appendix/apis/services/generic/#' + proto_link
                        elif type == 'service' and resource == 'mlmodel':
                            proto_anchor_link = '/appendix/apis/services/ml/#' + proto_link
                        elif type == 'app' and resource == 'app':
                            proto_anchor_link = '/appendix/apis/fleet/#' + proto_link
                        elif type == 'app' and resource in ["billing", "mltraining"]:
                            proto_anchor_link = '/appendix/apis/' + resource.replace('mltraining','ml-training') + '-client/#' + proto_link
                        elif type == 'app' and resource in ["data", "dataset", "data_sync"]:
                            proto_anchor_link = '/appendix/apis/data-client/#' + proto_link
                        elif type == 'robot':
                            proto_anchor_link = '/appendix/apis/' + resource + '/#' + proto_link

                        ## Fetch just the first sentence from the proto_override_file (first text string terminated by '.\n'), ignoring hugo
                        ## shortcodes like alerts ('{{%.*%}}.*{{% \[a-b].* %}}'), which precede some override files' (proto descriptions')
                        ## first sentence:
                        with open(proto_override_file, 'r') as f:
                            file_contents = f.read().strip()
                            file_contents = regex.sub(r'\{\{\%.*\%\}\}.*\{\{\% \/[a-b].* \%\}\}', '', file_contents, flags=regex.DOTALL)
                            search_result = file_contents.split('.\n', 1)[0].strip().replace("\n", " ")

                            ## If the proto description contains any MD links, strip them out:
                            search_result = regex.sub(r'\[([A-Za-z0-9\.\(\)\-\_\`\s]*)\]\([A-Za-z0-9\.\:\/\-\_\#]*\)', r'\1', search_result)

                            ## If the proto description is missing a trailing period, or we stripped it off during the above matching, append
                            ## (restore) the period character:
                            if not search_result.endswith('.'):
                                proto_description_first_sentence = search_result + '.'
                            else:
                                proto_description_first_sentence = search_result

                        ## Write out this proto's entry to this resource's table_file:
                        if resource != 'movement_sensor':
                            if micro_rdk_support != '':
                                if micro_rdk_support == 'Yes':
                                    mark = '<p class="center-text"><i class="fas fa-check" title="yes"></i></p>'
                                else:
                                    mark = '<p class="center-text"><i class="fas fa-times" title="no"></i></p>'
                                table_file.write('| [`' + proto + '`](' + proto_anchor_link + ') | ' + proto_description_first_sentence + ' | ' + mark +' |\n')
                            else:
                                table_file.write('| [`' + proto + '`](' + proto_anchor_link + ') | ' + proto_description_first_sentence + ' |\n')


                        ## Begin the per-language markdown writing to output_file with the opening tabset declaration:
                        output_file.write('{{< tabs >}}\n')

                        if py_method_name and "python" in sdks:
                            output_file.write('{{% tab name="Python" %}}\n\n')

                            ## Assemble possible method override filepaths. Provide a file at one or both of these locations to
                            ## inject additional MD content either before or after the auto-generated method content:
                            ## 'before': injects immediately after the opening SDK tab and before the first parameter is listed.
                            ## 'after': injects immediately after the code sample (or last return if none), and before the closing SDK tab.
                            ## .../overrides/methods/{sdk}.{resource}.{method_name}.before|after.md
                            before_method_override_filepath = path_to_methods_override + '/python.' + resource + '.' + py_method_name + '.before.md'
                            after_method_override_filepath = path_to_methods_override + '/python.' + resource + '.' + py_method_name + '.after.md'

                            ## If we detected a 'before' method override file, write it out here:
                            if os.path.exists(before_method_override_filepath):
                                for line in open(before_method_override_filepath, 'r', encoding='utf-8'):
                                    output_file.write(line)

                            output_file.write('**Parameters:**\n\n')

                            if 'parameters' in methods['python'][type][resource][py_method_name]:

                                for parameter in methods['python'][type][resource][py_method_name]['parameters'].keys():

                                    param_data = methods['python'][type][resource][py_method_name]['parameters'][parameter]

                                    param_type = param_data.get("param_type")

                                    param_description = ''
                                    ## .../overrides/methods/{sdk}.{resource}.{py_method_name}.{param_name}.md
                                    param_desc_override_file = path_to_methods_override + '/python.' + resource + '.' + py_method_name + '.' + parameter + '.md'

                                    if args.overrides:
                                        print(param_desc_override_file)

                                    if os.path.exists(param_desc_override_file):
                                        preserve_formatting = False
                                        for line in open(param_desc_override_file, 'r', encoding='utf-8'):
                                            if '<!-- preserve-formatting -->' in line:
                                                preserve_formatting = True
                                            if preserve_formatting and '<!-- preserve-formatting -->' not in line:
                                                param_description = param_description + line
                                            elif '<!-- preserve-formatting -->' not in line:
                                                param_description = param_description + line.replace('\n', ' ')
                                        param_description = param_description.rstrip()
                                    else:
                                        param_description = param_data.get("param_description").strip()

                                    optional = param_data.get("optional")

                                    output_file.write(f'- `{parameter}` ({param_type})')

                                    if optional:
                                        output_file.write(' (optional)')
                                    else:
                                        output_file.write(' (required)')

                                    if param_description:

                                        ## Add a trailing period if it is missing, either from upstream or from override file,
                                        ## but skip doing so if the copy instead ends with an HTML tag (like a closing '</ul>' tag):
                                        if not param_description.endswith('.') and not param_description.endswith('>'):
                                            param_description = param_description + '.'

                                        output_file.write(f": {param_description}")

                                    # line break for parameters list
                                    output_file.write('\n')

                            # Handle case where no parameters are found
                            else:
                                output_file.write("- None.\n")

                            output_file.write('\n**Returns:**\n\n')

                            if 'return' in methods['python'][type][resource][py_method_name]:

                                return_data = methods['python'][type][resource][py_method_name]["return"]
                                return_type = return_data.get("return_type")

                                return_description = ''
                                ## .../overrides/methods/{sdk}.{resource}.{py_method_name}.return.md
                                return_desc_override_file = path_to_methods_override + '/python.' + resource + '.' + py_method_name + '.return.md'

                                if args.overrides:
                                    print(return_desc_override_file)

                                if os.path.exists(return_desc_override_file):
                                    preserve_formatting = False
                                    for line in open(return_desc_override_file, 'r', encoding='utf-8'):
                                        if '<!-- preserve-formatting -->' in line:
                                            preserve_formatting = True
                                        if preserve_formatting and '<!-- preserve-formatting -->' not in line:
                                            return_description = return_description + line
                                        elif '<!-- preserve-formatting -->' not in line:
                                            return_description = return_description + line.replace('\n', ' ')
                                    return_description = return_description.rstrip()
                                else:
                                    return_description = return_data.get("return_description")

                                if return_type:
                                    output_file.write(f"- ({return_type})")

                                    if return_description:

                                        ## Add a trailing period if it is missing, either from upstream or from override file,
                                        ## but skip doing so if the copy instead ends with an HTML tag (like a closing '</ul>' tag):
                                        if not return_description.endswith('.') and not return_description.endswith('>'):
                                            return_description = return_description + '.'

                                        output_file.write(f": {return_description}\n")
                                    else:
                                        output_file.write("\n")
                            # Handle case where no returns are found
                            else:
                                output_file.write("- None.\n")

                            if 'raises' in methods['python'][type][resource][py_method_name]:
                                output_file.write('\n**Raises:**\n\n')

                                raises_object = methods['python'][type][resource][py_method_name]["raises"]
                                raises_types = methods['python'][type][resource][py_method_name]["raises"].keys()
                                for raises_type in raises_types:
                                    output_file.write(f"- ({raises_type})")
                                    if "raises_description" in raises_object[raises_type]:
                                        raises_description= raises_object[raises_type]["raises_description"]
                                        ## Add a trailing period if it is missing, either from upstream or from override file,
                                        ## but skip doing so if the copy instead ends with an HTML tag (like a closing '</ul>' tag):
                                        if not raises_description.endswith('.') and not raises_description.endswith('>'):
                                            raises_description = raises_description + '.'

                                        output_file.write(f": {raises_description}\n")
                                    else:
                                        output_file.write("\n")

                            ## If the method has a code sample, print it here:
                            if 'code_sample' in methods['python'][type][resource][py_method_name]:

                                output_file.write('\n**Example:**\n')
                                output_file.write('\n```' + code_fence_fmt['python'] + ' {class="line-numbers linkable-line-numbers"}\n')
                                output_file.write(methods['python'][type][resource][py_method_name]['code_sample'])
                                output_file.write('```\n')

                            ## If we detected an 'after' method override file earlier, write it out here:
                            if os.path.exists(after_method_override_filepath):

                                output_file.write('\n')
                                for line in open(after_method_override_filepath, 'r', encoding='utf-8'):
                                    output_file.write(line)

                            # Output the method link
                            output_file.write(f'\nFor more information, see the [Python SDK Docs]({methods["python"][type][resource][py_method_name]["method_link"]}).\n\n')

                            # Close tabs
                            output_file.write("{{% /tab %}}\n")
                            if not (go_method_name and "go" in sdks) and not (flutter_method_name and "flutter" in sdks):
                                output_file.write("{{< /tabs >}}\n")

                        if go_method_name and "go" in sdks:
                            output_file.write('{{% tab name="Go" %}}\n\n')

                            ## Assemble possible method override filepaths. Provide a file at one or both of these locations to
                            ## inject additional MD content either before or after the auto-generated method content:
                            ## 'before': injects immediately after the opening SDK tab and before the first parameter is listed.
                            ## 'after': injects immediately after the code sample (or last return if none), and before the closing SDK tab.
                            ## .../overrides/methods/{sdk}.{resource}.{method_name}.before|after.md
                            before_method_override_filepath = path_to_methods_override + '/go.' + resource + '.' + go_method_name + '.before.md'
                            after_method_override_filepath = path_to_methods_override + '/go.' + resource + '.' + go_method_name + '.after.md'

                            ## If we detected a 'before' method override file, write it out here:
                            if os.path.exists(before_method_override_filepath):
                                for line in open(before_method_override_filepath, 'r', encoding='utf-8'):
                                    output_file.write(line)

                                output_file.write('\n')

                            if 'usage' in methods['go'][type][resource][go_method_name]:

                                method_usage = methods['go'][type][resource][go_method_name]['usage']

                                usage_string = method_usage.split('(')

                                parameters = ''

                                if len(usage_string) == 3:
                                    parameters = usage_string[1]
                                    returns = usage_string[2]

                                else:
                                    usage_string = usage_string[1].split(') ')

                                    if usage_string[0] != '':
                                        parameters = usage_string[0]
                                        if len(usage_string) == 2:
                                            returns = usage_string[1]
                                    else:
                                        returns = usage_string[1]

                                output_file.write('**Parameters:**\n\n')

                                if len(parameters) > 0:
                                    # Parse and format parameters
                                    parsed_parameters = parse_method_usage(parameters)
                                    formatted_parameters = format_method_usage(parsed_parameters, go_method_name, resource, path_to_methods_override, methods["go"][type][resource][go_method_name]["method_link"])

                                    ## NOTE: Use commented-out print statements in formatted_returns() if populating override files.

                                    for line in formatted_parameters:
                                        output_file.write(line + '\n')
                                # Handle case where no parameters are found
                                else:
                                    output_file.write("- None.\n")

                                output_file.write('\n**Returns:**\n\n')
                                if returns:
                                    # Parse and format returns

                                    parsed_returns = parse_method_usage(returns)
                                    formatted_returns = format_method_usage(parsed_returns, go_method_name, resource, path_to_methods_override, methods["go"][type][resource][go_method_name]["method_link"])

                                    ## NOTE: Use commented-out print statements in formatted_returns() if populating override files.

                                    for line in formatted_returns:
                                        output_file.write(line + '\n')
                                # Handle case where no returns are found
                                else:
                                    output_file.write("- None.\n")

                            ## If the method has a code sample, print it here:
                            if 'code_sample' in methods['go'][type][resource][go_method_name]:

                                output_file.write('\n**Example:**\n')
                                output_file.write('\n```' + code_fence_fmt['go'] + ' {class="line-numbers linkable-line-numbers"}\n')
                                output_file.write(methods['go'][type][resource][go_method_name]['code_sample'])
                                output_file.write('```\n')

                            ## If we detected an 'after' method override file earlier, write it out here:
                            if os.path.exists(after_method_override_filepath):

                                output_file.write('\n')
                                for line in open(after_method_override_filepath, 'r', encoding='utf-8'):
                                    output_file.write(line)

                            # Output the method link
                            output_file.write(f'\nFor more information, see the [Go SDK Docs]({methods["go"][type][resource][go_method_name]["method_link"]}).\n\n')

                            output_file.write("{{% /tab %}}\n")
                            if not (flutter_method_name and "flutter" in sdks):
                                output_file.write("{{< /tabs >}}\n")

                        if flutter_method_name and "flutter" in sdks:
                            output_file.write('{{% tab name="Flutter" %}}\n\n')

                            ## Assemble possible method override filepaths. Provide a file at one or both of these locations to
                            ## inject additional MD content either before or after the auto-generated method content:
                            ## 'before': injects immediately after the opening SDK tab and before the first parameter is listed.
                            ## 'after': injects immediately after the code sample (or last return if none), and before the closing SDK tab.
                            ## .../overrides/methods/{sdk}.{resource}.{method_name}.before|after.md
                            before_method_override_filepath = path_to_methods_override + '/flutter.' + resource + '.' + flutter_method_name + '.before.md'
                            after_method_override_filepath = path_to_methods_override + '/flutter.' + resource + '.' + flutter_method_name + '.after.md'

                            ## If we detected a 'before' method override file, write it out here:
                            if os.path.exists(before_method_override_filepath):
                                for line in open(before_method_override_filepath, 'r', encoding='utf-8'):
                                    output_file.write(line)

                            output_file.write('**Parameters:**\n\n')
                            if 'parameters' in methods['flutter'][type][resource][flutter_method_name]:

                                for parameter in methods['flutter'][type][resource][flutter_method_name]['parameters'].keys():

                                    param_data = methods['flutter'][type][resource][flutter_method_name]['parameters'][parameter]

                                    param_type = param_data.get("param_type")
                                    param_usage = param_data.get("param_usage")

                                    param_description = ''
                                    ## .../overrides/methods/{sdk}.{resource}.{method_name}.{param_name}.md
                                    param_desc_override_file = path_to_methods_override + '/flutter.' + resource + '.' + flutter_method_name + '.' + parameter + '.md'

                                    if args.overrides:
                                        print(param_desc_override_file)

                                    ## Check if param description override file exists:
                                    if os.path.exists(param_desc_override_file):
                                        preserve_formatting = False
                                        for line in open(param_desc_override_file, 'r', encoding='utf-8'):
                                            if '<!-- preserve-formatting -->' in line:
                                                preserve_formatting = True
                                            if preserve_formatting and '<!-- preserve-formatting -->' not in line:
                                                param_description = param_description + line
                                            elif '<!-- preserve-formatting -->' not in line:
                                                param_description = param_description + line.replace('\n', ' ')
                                        param_description = param_description.rstrip()
                                    else:
                                        param_description = param_data.get("param_description")

                                    optional = param_data.get("optional")

                                    output_file.write(f'- `{parameter}` {param_usage}')

                                    if optional:
                                        output_file.write(' (optional)')
                                    else:
                                        output_file.write(' (required)')

                                    if param_description:

                                        ## Add a trailing period if it is missing, either from upstream or from override file,
                                        ## but skip doing so if the copy instead ends with an HTML tag (like a closing '</ul>' tag):
                                        if not param_description.endswith('.') and not param_description.endswith('>'):
                                            param_description = param_description + '.'

                                        output_file.write(f": {param_description}")

                                    # line break for parameters list
                                    output_file.write('\n')

                            # Handle case where no parameters are found
                            else:
                                output_file.write("- None.\n")

                            output_file.write('\n**Returns:**\n\n')
                            if 'return' in methods['flutter'][type][resource][flutter_method_name]:

                                for return_type in methods['flutter'][type][resource][flutter_method_name]["return"].keys():

                                    return_data = methods['flutter'][type][resource][flutter_method_name]["return"][return_type]
                                    return_usage = return_data.get("return_usage")

                                    return_description = ''

                                    if '<' in return_type:
                                        return_type_short = return_type.split('<')[1].split('>')[0].split(',')[0]
                                    else:
                                        return_type_short = return_type

                                    ## .../overrides/methods/{sdk}.{resource}.{flutter_method_name}.{return_type_short}.return.md
                                    return_desc_override_file = path_to_methods_override + '/flutter.' + resource + '.' + flutter_method_name + '.' + return_type_short + '.return.md'

                                    if args.overrides:
                                        print(return_desc_override_file)

                                    ## Check if return description override file exists:
                                    if os.path.exists(return_desc_override_file):
                                        preserve_formatting = False
                                        for line in open(return_desc_override_file, 'r', encoding='utf-8'):
                                            if '<!-- preserve-formatting -->' in line:
                                                preserve_formatting = True
                                            if preserve_formatting and '<!-- preserve-formatting -->' not in line:
                                                return_description = return_description + line
                                            elif '<!-- preserve-formatting -->' not in line:
                                                return_description = return_description + line.replace('\n', ' ')
                                        return_description = return_description.rstrip()
                                    else:
                                        return_description = return_data.get("return_description")

                                    if return_type:
                                        output_file.write(f"- {return_usage}")

                                        if return_description:

                                            ## Add a trailing period if it is missing, either from upstream or from override file,
                                            ## but skip doing so if the copy instead ends with an HTML tag (like a closing '</ul>' tag):
                                            if not return_description.endswith('.') and not return_description.endswith('>'):
                                                return_description = return_description + '.'

                                            output_file.write(f": {return_description}\n")
                                        else:
                                            output_file.write("\n")
                            else:
                                # Handle case where no returns are found
                                output_file.write("- None.\n")

                            ## If the method has a code sample, print it here:
                            if 'code_sample' in methods['flutter'][type][resource][flutter_method_name]:

                                output_file.write('\n**Example:**\n')
                                output_file.write('\n```' + code_fence_fmt['flutter'] + ' {class="line-numbers linkable-line-numbers"}\n')
                                output_file.write(methods['flutter'][type][resource][flutter_method_name]['code_sample'])
                                output_file.write('```\n')

                            ## If we detected an 'after' method override file earlier, write it out here:
                            if os.path.exists(after_method_override_filepath):

                                output_file.write('\n')
                                for line in open(after_method_override_filepath, 'r', encoding='utf-8'):
                                    output_file.write(line)

                            # Output the method link
                            output_file.write(f'\nFor more information, see the [Flutter SDK Docs]({methods["flutter"][type][resource][flutter_method_name]["method_link"]}).\n\n')

                            output_file.write("{{% /tab %}}\n")
                            output_file.write("{{< /tabs >}}\n")

                        ## After this loop, we will be working with additional methods appended to the same {resource}.md include file.
                        ## This switch tells us at the start of the loop for this same resource that we should double-newline the next
                        ## proto encountered:
                        is_first_method_in_this_resource = False

        ## Close file handles:
        output_file.close()
        table_file.close()

        ## When running against specific languages using the sdks array, it is possible to create empty target files.
        ## If such empty target files are present on the local filesystem, remove them:
        if os.path.isfile(full_path_to_resource_file) and os.path.getsize(full_path_to_resource_file) == 0:
            os.remove(full_path_to_resource_file)
        if os.path.isfile(full_path_to_table_file) and os.path.getsize(full_path_to_table_file) == 0:
            os.remove(full_path_to_table_file)

## Main run function:
## - proto_map()        Fetch canonical proto methods from upstream, used for Flutter mapping in `parse()`
## - parse()            Get methods for each defined type & resource, return data object for each, by SDK
## - write_markdown()   Write out salient fields from passed data object to specific MD files
def run():

    ## If generating the mapping template file, skip all other functionality:
    if args.map:
        if args.verbose:
            print('DEBUG: Now fetching upstream PROTOs')
        proto_map = get_proto_apis()
        if args.verbose:
            print('DEBUG: Completed fetching upstream PROTOs!')

    ## Otherwise, continue as normal:
    else:

        ## If running in verbose mode:
        if args.verbose:
            debug_filepath = os.path.join('/tmp/', 'update_sdk_methods_debug.txt')
            ## Delete debug file from last run:
            if os.path.isfile(debug_filepath):
                os.remove(debug_filepath)
            debug_file = open('%s' % debug_filepath, "w")

        ## Parse components:
        if only_run_against not in ['services', 'app_apis', 'robot_apis']:
            if args.verbose:
                print('DEBUG: Now parsing upstream COMPONENT methods for: ' + str(sdks))
            component_methods = parse("component", components)
            if args.verbose:
                print('DEBUG: Completed parsing upstream COMPONENT methods!')
                debug_file.write(str(component_methods) + '\n')
                print('DEBUG: Now writing markdown for COMPONENT methods for: ' + str(sdks))
            write_markdown("component", components, component_methods)
            if args.verbose:
                print('DEBUG: Completed writing markdown for COMPONENT methods!')

        ## Parse services:
        if only_run_against not in ['components', 'app_apis', 'robot_apis']:
            if args.verbose:
                print('DEBUG: Now parsing upstream SERVICE methods for: ' + str(sdks))
            service_methods = parse("service", services)
            if args.verbose:
                print('DEBUG: Completed parsing upstream SERVICE methods!')
                debug_file.write(str(service_methods) + '\n')
                print('DEBUG: Now writing markdown for SERVICE methods for: ' + str(sdks))
            write_markdown("service", services, service_methods)
            if args.verbose:
                print('DEBUG: Completed writing markdown for SERVICE methods!')

        ## Parse app client:
        if only_run_against not in ['components', 'services', 'robot_apis']:
            if args.verbose:
                print('DEBUG: Now parsing upstream APP methods for: ' + str(sdks))
            app_methods = parse("app", app_apis)
            if args.verbose:
                print('DEBUG: Completed parsing upstream APP methods!')
                debug_file.write(str(app_methods) + '\n')
                print('DEBUG: Now writing markdown for APP methods for: ' + str(sdks))
            write_markdown("app", app_apis, app_methods)
            if args.verbose:
                print('DEBUG: Completed writing markdown for APP methods!')

        ## Parse robot client:
        if only_run_against not in ['components', 'services', 'app_apis']:
            if args.verbose:
                print('DEBUG: Now parsing upstream ROBOT methods for: ' + str(sdks))
            robot_methods = parse("robot", robot_apis)
            if args.verbose:
                print('DEBUG: Completed parsing upstream ROBOT methods!')
                debug_file.write(str(robot_methods) + '\n')
                print('DEBUG: Now writing markdown for ROBOT methods for: ' + str(sdks))
            write_markdown("robot", robot_apis, robot_methods)
            if args.verbose:
                print('DEBUG: Completed writing markdown for ROBOT methods!')

run()

sys.exit(1)
